<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>OpenVPN配置</title>
    <link href="/2021/02/05/openvpn/"/>
    <url>/2021/02/05/openvpn/</url>
    
    <content type="html"><![CDATA[<p>就是爱折腾，明明没有更多需求了，还是研究了一下VPN的使用。</p><!---more---><h2 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h2><ul><li>两边都有ipv6网络环境</li><li>家里openwrt软路由作为旁路由，VPN就架设在这个设备上</li><li>终端使用win10安装openvpn gui</li></ul><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><p>主要配置点：</p><ol><li><p>协议，需要选TCP Server IPv6</p></li><li><p>端口可改可不改</p></li><li><p>ddns填入配置好的域名</p></li><li><p>客户端网段不能与现有重复</p></li><li><p>推送是这样，如果想将所有流量都通过vpn服务器，可以保留默认设置。如果只是内网连接，外网不走服务器，可以调整一下。PUSH 选项的释义</p><ul><li><pre><code class="bash">route 192.XXX.XXX.0   #向远程的客户端推送路由表,就是服务器那边的内网段<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>- ```bash<br>  comp-lzo adaptive   #告知客户端使用LZO压缩<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="bash">dhcp-option DNS 192.XXX.XXX.10   #向远程的客户端推送DNS<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><br>- ```<span class="hljs-keyword">bash</span><br><span class="hljs-keyword"> </span> redirect-gateway def1 <span class="hljs-keyword">bypass-dhcp </span> <span class="hljs-comment">#客户端网关重定向</span><br>  route-gateway <span class="hljs-number">172</span>.<span class="hljs-number">16</span>.<span class="hljs-number">30</span>.<span class="hljs-number">1</span>          <span class="hljs-comment">#向远程的客户端推送网关信息，所有的流量都通过VPN传输</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ol><p><img src="https://img.pluoluo.top/hexo/210205_openvpn.jpg"></p><p>配置完了，点<em>一键下载.ovpn文件</em> ，保存文件，等下到客户端导入。</p><h2 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h2><p>客户端安装，链接<a href="https://swupdate.openvpn.org/community/releases/OpenVPN-2.5.0-I601-amd64.msi">在这</a> 或者<a href="https://blog.alttt.com/downloads.php?site=1&file=202002669258294.zip&name=openvpn-install-2.4.8-I601-Win10.exe.zip">这里</a></p><p>打开后导入服务器导出的文件，如果愿意要所在流量通过服务器，现在就可以用了。</p><p>如果只想连接内网，外网不通过服务器，需要加几条，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">route</span>-nopull             #忽略服务器的push设置中的route项<br><span class="hljs-attribute">route</span> <span class="hljs-number">192</span>.XXX.XXX.<span class="hljs-number">0</span> <span class="hljs-number">255.255.255.0</span>  vpn_gateway    #对端内网段通过vpn，其它的不通过。<br><span class="hljs-comment">#route 192.168.0.0 255.255.0.0 net_gateway         #使192.168.0.0/24网段，不走vpn网关</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>内网穿透</tag>
      
      <tag>nps</tag>
      
      <tag>vpn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程连接服务器发布博客</title>
    <link href="/2021/02/02/linux%E8%BF%9C%E7%A8%8B%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/02/02/linux%E8%BF%9C%E7%A8%8B%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>hexo发布需要在服务器运行命令行，而网页发布插件经常不能识别在typora写的文件头，于是写一个脚本，以一实现一键发布。</p><!---more---><h3 id="实现环境"><a href="#实现环境" class="headerlink" title="实现环境"></a>实现环境</h3><ul><li>win10</li><li>安装wsl，其实用bat脚本应该也很容易，但是我真不会。</li><li>hexo安装在家里的群晖</li></ul><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><h4 id="免密登录群晖"><a href="#免密登录群晖" class="headerlink" title="免密登录群晖"></a>免密登录群晖</h4><p>​    首先要解决的是ssh远程连接的问题，不能把密码存在脚本中，需要找到一个安全的连接方式，使用私钥登陆就可以解决这个问题，实现无密码登录。</p><ol><li><h5 id="本地生成ssh私钥对"><a href="#本地生成ssh私钥对" class="headerlink" title="本地生成ssh私钥对"></a>本地生成ssh私钥对</h5><p>在<em>cmd</em> 或<em>bash</em> 中运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> xxxx可以随意命名，只是对这个密钥对给个名称，当群晖上有多个密钥对时可以通过这个名称区分密钥对的用途</span><br><span class="hljs-meta">#</span><span class="bash"> 如果是想直接在群晖上生成，需先ssh进入群晖</span><br>ssh-keygen -t rsa -C &quot;xxxx&quot;<br></code></pre></td></tr></table></figure><p>过程中会询问路径和密码，可以回车跳过。密码就不要设了，设了密码还得写在脚本的，没意义。默认目录即用户目录 ，如果自定义目录，需要把私钥文件id_rsa复制到用户目录的.ssh目录下。</p></li><li><h5 id="将生成的公钥复制到服务器"><a href="#将生成的公钥复制到服务器" class="headerlink" title="将生成的公钥复制到服务器"></a>将生成的公钥复制到服务器</h5><p>上一部生成的公钥（id_rsa.pub）需要放在群晖的用户目录下面的.ssh/authorized_keys中，<em>（这里要说明，用户是指要使用的登录帐号，用户目录是指homes下面的目录，这个目录在filesation中是看不到的，需要使用ssh）</em>可以有几个方法要复制过去。</p><ul><li><p>先将文件上传到群晖，ssh后再cp进去就可以了。</p></li><li><p>用notepad++打开公钥文件，复制内容，ssh后，touch一个新的文件，将内容写入文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ~/.ssh<br>touch authorized_keys<br>vi autorized_keys<br></code></pre></td></tr></table></figure></li><li><p>使用ssh-copy-id命令，有些教程里提到，我没用过。</p></li></ul></li><li><h5 id="群晖设置"><a href="#群晖设置" class="headerlink" title="群晖设置"></a>群晖设置</h5><ul><li><p>群晖用户目录权限默认为 777，必须要修改为755才能免密登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 755 [myhome]<br>chmod 600 ~/.ssh/authorized_keys<br>chmod 700 ~/.ssh<br></code></pre></td></tr></table></figure></li><li><p>修改sshd配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/ssh/sshd_config<br><span class="hljs-meta"> #</span><span class="bash">检查如下三个设置</span><br>RSAAuthentication yes<br>PubkeyAuthentication yes<br>AuthorizedKeysFile .ssh/authorized_keys<br></code></pre></td></tr></table></figure></li><li><p>重启sshd</p></li></ul><p>现在即可免密登录群晖了。</p></li></ol><h4 id="配置服务器别名"><a href="#配置服务器别名" class="headerlink" title="配置服务器别名"></a>配置服务器别名</h4><p>在本地配置服务器的别名，每次ssh服务器时就不用输入ip域名，端口，和用户名了。当然这一步对脚本来说意义不大，顺便写在这。运行，wsl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br>vi config<br><span class="hljs-comment">###按下面格式写入内容###</span><br>Host nas             <span class="hljs-comment">#nas即是设置的别名</span><br>        HostName 140.23.11.2          <span class="hljs-comment">#服务器ip地址</span><br>        user usre                         <span class="hljs-comment">#用户名</span><br>        IdentityFile ~/.ssh/id_rsa        <span class="hljs-comment">#私钥地址</span><br>        Port 512                          <span class="hljs-comment">#服务器sshd端口</span><br></code></pre></td></tr></table></figure><p>配置完了即可通过下面命令连接服务器了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh nas<br></code></pre></td></tr></table></figure><p>现在要解决的是，ssh自动执行命令的问题</p><h4 id="解决root密码输入的问题"><a href="#解决root密码输入的问题" class="headerlink" title="解决root密码输入的问题"></a>解决root密码输入的问题</h4><p>因为当初在布署hexo的时候用的是root账号，而现在root账号的密码不能再登入ssh了，用其它管理员账号发布hexo会报错，于是得提权，用eof输入密码的话，好像不起作用。最终还是只能在服务器上写一个可执行脚本，本地电脑ssh到服务器执行服务器脚本，曲线救国。</p><h5 id="本地脚本"><a href="#本地脚本" class="headerlink" title="本地脚本"></a>本地脚本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>ssh -tt nas &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">/volume4/homes/aduser/blog.sh</span><br><span class="hljs-string">EOF</span><br><span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure><h5 id="服务器脚本"><a href="#服务器脚本" class="headerlink" title="服务器脚本"></a>服务器脚本</h5><p>服务器上除了blog.sh，还有一个密码文件.ho.d，把密码放在里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ssh success!&quot;</span><br><span class="hljs-built_in">cd</span> /volume4/web/blog<br>password=$(cat /volume4/homes/aduser/.ho.d)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$password</span>&quot;</span> | sudo -S hexo clean<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$password</span>&quot;</span> | sudo -S hexo g<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ok&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$password</span>&quot;</span> | sudo -S hexo d<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Publish Blog Success!&quot;</span><br><span class="hljs-built_in">exit</span> 0<br></code></pre></td></tr></table></figure><p>本地运行脚本即可以发布博客，现在只要解决win10的*.sh* 文件默认用bash打开即可实现一键发布。</p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openwrt固件获取、编译与安装</title>
    <link href="/2021/01/21/openwrt%E5%9B%BA%E4%BB%B6%E8%8E%B7%E5%8F%96%E3%80%81%E7%BC%96%E8%AF%91%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <url>/2021/01/21/openwrt%E5%9B%BA%E4%BB%B6%E8%8E%B7%E5%8F%96%E3%80%81%E7%BC%96%E8%AF%91%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>LEAN的源码非常棒，一次成功！功能完善！自编4300固件稳定运行</p><a id="more"></a><p>剪辑自: <a href="https://www.jianshu.com/p/6d9a8612c5d9">https://www.jianshu.com/p/6d9a8612c5d9</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://link.jianshu.com/?t=http://www.linuxdiyf.com/linux/19900.html">在linux下修改编译网件WNDR3700v4的Openwrt固件 </a> <a href="https://link.jianshu.com/?t=http://www.leyar.me/openwrt-buildroot-for-wndr4300">Archlinux 下为 wndr4300 编译 OpenWrt trunk 版固件 </a> <a href="https://link.jianshu.com/?t=http://www.dreamxu.com/compile-your-own-openwrt/">编译自己的 OpenWrt 固件 </a> <a href="https://link.jianshu.com/?t=http://www.cnblogs.com/dongdong230/p/4186010.html">【Linux/Ubuntu学习 7】E: 无法获得锁 /var/lib/dpkg/lock – open (11: 资源暂时不可用) E: 无法锁定管理目录</a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>路由器 NETGEAR WNDR3700v4<br> 编译环境 ubuntu-16.10-desktop-amd64</p><h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><h4 id="固件的获取"><a href="#固件的获取" class="headerlink" title="固件的获取"></a><em>固件的获取</em></h4><ol><li>openwrt官网/科大清华阿里等的镜像站下载官方编译好固件<pre><code>       这类固件比较干净，里面只带了一些必要的软件包       可能没有我们路由器的型号，或者无法充分利用路由器升级的内存</code></pre></li><li>民间大神编辑，如明月的OPENWRT<pre><code>       这类固件装了很多软件包，操作简单       功能很多，可能我们用不到</code></pre></li><li>自己编译固件</li></ol><h4 id="为什么要自己编译固件"><a href="#为什么要自己编译固件" class="headerlink" title="为什么要自己编译固件"></a><em>为什么要自己编译固件</em></h4><p>主要是听起来很酷<br> 官方的包可能存在问题，例如我的3700v4有120M的flash，官方的包识别32M，可以通过自己编译解决，而且在编译时还可以安装一些软件包，这样，装完系统后，很多软件就不用一个一个装了</p><h3 id="编译固件"><a href="#编译固件" class="headerlink" title="编译固件"></a>编译固件</h3><p>编译环境 ubuntu-16.10-desktop-amd64 的硬盘空间至少剩余20G，在编译的过程中虽然源代码100M左右，但是编译产生的中间文件有10G左右</p><h4 id="安装编译环境和依赖"><a href="#安装编译环境和依赖" class="headerlink" title="安装编译环境和依赖"></a><em>安装编译环境和依赖</em></h4><p>Ubuntu终端内输入</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp">sudo su<br> apt-<span class="hljs-keyword">get</span> update  <span class="hljs-meta">#更新软件列表</span><br> apt-<span class="hljs-keyword">get</span> install g++<br> apt-<span class="hljs-keyword">get</span> install libncurses5-dev<br> apt-<span class="hljs-keyword">get</span> install zlib1g-dev<br> apt-<span class="hljs-keyword">get</span> install bison<br> apt-<span class="hljs-keyword">get</span> install flex<br> apt-<span class="hljs-keyword">get</span> install unzip<br> apt-<span class="hljs-keyword">get</span> install autoconf<br> apt-<span class="hljs-keyword">get</span> install gawk<br> apt-<span class="hljs-keyword">get</span> install make<br> apt-<span class="hljs-keyword">get</span> install gettext<br> apt-<span class="hljs-keyword">get</span> install gcc<br> apt-<span class="hljs-keyword">get</span> install binutils<br> apt-<span class="hljs-keyword">get</span> install patch<br> apt-<span class="hljs-keyword">get</span> install bzip2<br> apt-<span class="hljs-keyword">get</span> install libz-dev<br> apt-<span class="hljs-keyword">get</span> install subversion<br> apt-<span class="hljs-keyword">get</span> install asciidoc <span class="hljs-meta">#这个软件400M会下载好久</span><br></code></pre></td></tr></table></figure><h4 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a><em>下载源码</em></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">exit</span> <span class="hljs-comment">#退出root，openwrt默认是不允许用root编译的</span><br></code></pre></td></tr></table></figure><p><strong>下载源代码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> -b chaos_calmer git://github.com/openwrt/openwrt.git<br></code></pre></td></tr></table></figure><p>当然下载方式很多，这里仅是使用git从GitHub下载，也可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://github.com/openwrt/openwrt/archive/master.zip<br>sudu apt-get install zip<br>unzip master.zip<br></code></pre></td></tr></table></figure><p>源码就在那里<a href="https://link.jianshu.com/?t=https://github.com/openwrt/openwrt"><strong>openwrt</strong></a>，下载方法随意<br>可以将下载源码的复制一份，免得之后的修改弄坏了，还可以重头来过</p><h4 id="编译前的设置"><a href="#编译前的设置" class="headerlink" title="编译前的设置"></a><em>编译前的设置</em></h4><p>进入源码目录git的目录为openwrt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> openwrt<br></code></pre></td></tr></table></figure><p> wget后解压的目录为openwrt-master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd openwrt-master<br></code></pre></td></tr></table></figure><p>其他方法下载的源码进入源码目录自定义</p><p>更新下载并安装所有可用的 feeds</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">./scripts/feeds update -a<br>./scripts/feeds install -a<br></code></pre></td></tr></table></figure><p>检查还有哪些包没有安装,根据提示安装缺少的软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make defconfig<br>make prereq<br></code></pre></td></tr></table></figure><p><strong>打开配置菜单</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make menuconfig<br></code></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/4575564-2d4c4e6f93289efa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800/format/webp" alt="img"></p><p> <strong>操作规则</strong><br> Enter进入子菜单/确定，空格切换软件包的状态  【*】表示编译进固件包，【M】表示编译成安装文件，【】为不做操作<br>左右键切换最下面的<Select> &lt; Exit &gt; &lt; Help &gt; &lt; Save &gt; &lt; Load &gt;<br> &lt; Exit &gt;返回上级菜单/退出</Select></p><p>针对我3700v4选择以下参数<br> CPU型号 Target System 选中’(Atheros AR7xxx/AR9xxx)’<br> Flash型号 Subtarget 选中 ‘(Genaric devices with NAND flsh)’<br> 路由器型号 Target Profile 选中’(NETGEAR WNDR3700v4/WNDR4300)’<br> （其他路由器适当选择，如果官方还没支持你的路由器，可按照硬件类似的路由器选择型号）</p><p>选择自己所需要安装的包<br> LuCI –&gt;Collections –&gt; luci #LuCI页面 参见openwrt使用心得系列—-功能实现回帖</p><p>Network –&gt;选中wpad 取消wpad-mini 即【*】wpad 【】wpad-mini 校园网认证802.1x用的，其他软件包根据需求安装/第一次学习也可以不添加软件包，编译之后也可以再安装软件包</p><p>选中&lt; Save &gt; 保存 &lt; Exit &gt; 退出<br> 执行scripts/diffconfig.sh &gt; diffconfig 保存修改内容至diffconfig文件。</p><p>其他修改<br> 我需要修改3700v4的flash大小，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi .<span class="hljs-regexp">/target/</span>linux<span class="hljs-regexp">/ar71xx/im</span>age/Makefile <span class="hljs-comment">#修改Makeflie文件</span><br></code></pre></td></tr></table></figure><p>/wndr4300 搜索 wndr4300<br> 将23552k(ubi),25600k@0x6c0000(firmware)修改为121856k(ubi),123904k@0x6c0000(firmware)<br> 使整个语段变为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wndr4300_mtdlayout</span>=mtdparts=ar<span class="hljs-number">934</span>x-nfc:<span class="hljs-number">256</span>k(u-boot)ro,<span class="hljs-number">256</span>k(u-boot-env)ro,<span class="hljs-number">256</span>k(caldata),<span class="hljs-number">512</span>k(pot),<span class="hljs-number">2048</span>k(language),<span class="hljs-number">512</span>k(config),<span class="hljs-number">3072</span>k(traffic_meter),<span class="hljs-number">2048</span>k(kernel),<span class="hljs-number">121856</span>k(ubi),<span class="hljs-number">123904</span>k@<span class="hljs-number">0</span>x<span class="hljs-number">6</span>c<span class="hljs-number">0000</span>(firmware),<span class="hljs-number">256</span>k(caldata_backup),-(reserved)<br></code></pre></td></tr></table></figure><p>另外需要说明下编译LEDE的更改文件如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim .<span class="hljs-regexp">/target/</span>linux<span class="hljs-regexp">/ar71xx/im</span>age/legacy.mk<br></code></pre></td></tr></table></figure><p>更改前：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wndr4300_mtdlayout</span>=mtdparts=ar<span class="hljs-number">934</span>x-nfc:<span class="hljs-number">256</span>k(u-boot)ro,<span class="hljs-number">256</span>k(u-boot-env)ro,<span class="hljs-number">256</span>k(caldata)ro,<span class="hljs-number">512</span>k(pot),<span class="hljs-number">2048</span>k(language),<span class="hljs-number">512</span>k(config),<span class="hljs-number">3072</span>k(traffic_meter),<span class="hljs-number">2048</span>k(kernel),<span class="hljs-number">23552</span>k(ubi),<span class="hljs-number">25600</span>k@<span class="hljs-number">0</span>x<span class="hljs-number">6</span>c<span class="hljs-number">0000</span>(firmware),<span class="hljs-number">256</span>k(caldata_backup),-(reserved)<br></code></pre></td></tr></table></figure><p>更改后：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wndr4300_mtdlayout</span>=mtdparts=ar<span class="hljs-number">934</span>x-nfc:<span class="hljs-number">256</span>k(u-boot)ro,<span class="hljs-number">256</span>k(u-boot-env)ro,<span class="hljs-number">256</span>k(caldata),<span class="hljs-number">512</span>k(pot),<span class="hljs-number">2048</span>k(language),<span class="hljs-number">512</span>k(config),<span class="hljs-number">3072</span>k(traffic_meter),<span class="hljs-number">2048</span>k(kernel),**<span class="hljs-number">120832</span>k**(ubi),**<span class="hljs-number">122880</span>k**@<span class="hljs-number">0</span>x<span class="hljs-number">6</span>c<span class="hljs-number">0000</span>(firmware),<span class="hljs-number">256</span>k(caldata_backup),-(reserved)<br></code></pre></td></tr></table></figure><p>esc退出编辑状态 :wq 保存退出</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a><em>编译</em></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">make</span> -j3 V=s #第一次更推荐你输入<span class="hljs-built_in">make</span> -j1 V=s进行编译<br></code></pre></td></tr></table></figure><blockquote><p>据说:j 后面数字改为你的 cpu 数量 +1，-j3 表示3线程运行，某个线程出错不会马上停止构建，而是等待其它线程结束，真正的错误信息被其他线程刷掉了。所以要-j1更容易找到编译失败原因<br> 我第一次使用make -j3 V=s 出错，使用make -j1 V=s正常编译完成<br> 出问题多google，</p></blockquote><p>第一次编译时间比较长，以后就快了，大概是因为很多源代码编译后，不需要再次编译了吧</p><h4 id="查看编译出的固件"><a href="#查看编译出的固件" class="headerlink" title="查看编译出的固件"></a><em>查看编译出的固件</em></h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chen</span>@chen-virtual-machine:/media/chen/openwrt$ cd ./bin/ar<span class="hljs-number">71</span>xx <br><span class="hljs-attribute">chen</span>@chen-virtual-machine:/media/chen/openwrt/bin/ar<span class="hljs-number">71</span>xx$ ls<br><span class="hljs-attribute">md5sums</span>                openwrt-ar<span class="hljs-number">71</span>xx-nand-vmlinux.elf             openwrt-ar<span class="hljs-number">71</span>xx-nand-wndr<span class="hljs-number">4300</span>-squashfs-sysupgrade.tar<br><span class="hljs-attribute">openwrt</span>-ar<span class="hljs-number">71</span>xx-nand-root.squashfs   openwrt-ar<span class="hljs-number">71</span>xx-nand-vmlinux.gz             openwrt-ar<span class="hljs-number">71</span>xx-nand-wndr<span class="hljs-number">4300</span>-ubi-factory.img<br><span class="hljs-attribute">openwrt</span>-ar<span class="hljs-number">71</span>xx-nand-root.squashfs-<span class="hljs-number">64</span>k openwrt-ar<span class="hljs-number">71</span>xx-nand-vmlinux.lzma            packages<br><span class="hljs-attribute">openwrt</span>-ar<span class="hljs-number">71</span>xx-nand-uImage-gzip.bin  openwrt-ar<span class="hljs-number">71</span>xx-nand-vmlinux-lzma.elf          sha<span class="hljs-number">256</span>sums<br><span class="hljs-attribute">openwrt</span>-ar<span class="hljs-number">71</span>xx-nand-uImage-lzma.bin  openwrt-ar<span class="hljs-number">71</span>xx-nand-wndr<span class="hljs-number">3700</span>v<span class="hljs-number">4</span>-squashfs-sysupgrade.tar<br><span class="hljs-attribute">openwrt</span>-ar<span class="hljs-number">71</span>xx-nand-vmlinux.bin    openwrt-ar<span class="hljs-number">71</span>xx-nand-wndr<span class="hljs-number">3700</span>v<span class="hljs-number">4</span>-ubi-factory.img<br></code></pre></td></tr></table></figure><p>使用U盘，winscp等任何方法复制出需要的固件</p><h4 id="编译时遇到的问题"><a href="#编译时遇到的问题" class="headerlink" title="编译时遇到的问题"></a><em>编译时遇到的问题</em></h4><p><strong>编译失败提示</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&#123;standardinput&#125;: Fatal <span class="hljs-keyword">error</span>: can&#x27;t close fs/namespace.o: No <span class="hljs-literal">space</span> left <span class="hljs-keyword">on</span> device<br></code></pre></td></tr></table></figure><p>找到出错源头，可发现时空间不足<br> 打开ubuntu，ubuntu也提示磁盘不足，验证想法正确，对虚拟机进行扩大磁盘操作解决</p><p><strong>make menuconfig</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$make</span> menuconfig<br>Your display is toosmall <span class="hljs-keyword">to</span> <span class="hljs-builtin-name">run</span> Menuconfig!<br></code></pre></td></tr></table></figure><p>观察提示，我是ssh连接的ubuntu，xshell的窗口太小了，显示不全配置菜单，放大窗口就可以了</p><p>在使用ubuntu apt-get 时，我遇到过下列错误提示</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-symbol">E:</span> 无法获得锁 /var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">dpkg</span>/<span class="hljs-title">lock</span> - <span class="hljs-title">open</span> (11: 资源暂时不可用)<span class="hljs-title">E</span>: 无法锁定管理目录(/<span class="hljs-title">var</span>/<span class="hljs-title">lib</span>/<span class="hljs-title">dpkg</span>/)，是否有其他进程正占用它？</span><br></code></pre></td></tr></table></figure><p>通过下列方法解决</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">sudo rm /var/cache/apt/archives/locksudo rm /var/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">dpkg</span>/<span class="hljs-title">lock</span></span><br></code></pre></td></tr></table></figure><p>再次install软件，提示：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">E: dpkg 被中断，您必须手工运行 sudo dpkg <span class="hljs-comment">--configure -a 解决此问题</span><br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo dpkg <span class="hljs-comment">--configure -a</span><br></code></pre></td></tr></table></figure><p>再次进行安装</p><h3 id="安装固件"><a href="#安装固件" class="headerlink" title="安装固件"></a>安装固件</h3><p><strong>已刷breed或者uboot<br> 电脑通过网线连接路由器，打开浏览器输入192.168.1.1<br> 路由器按住reset键，上电开机<br> 浏览器不断刷新 192.168.1.1 界面直到出现bootloader（breed/uboot）引导界面，松开reset键<br> 通过固件更新选项卡，上传固件进行升级，支持img和bin格式<br> 我上传的是openwrt-15.05.1-ar71xx-nand-wndr3700v4-ubi-factory.img文件<br> 上传重启<br> 路由器支持bootloader升级，未刷breed/uboot<br> 搜索相应路由器型号的刷机教程<br> 已刷openwrt<br> 可在Luci界面 -》系统 -》备份升级 -》 刷写新固件<br> 选择openwrt-15.05.1-ar71xx-nand-wndr3700v4-squashfs-sysupgrade.tar文件<br> 版本号相同可以保留原有配置，不同不保留<br> 仅支持.tar格式</strong>的文件，如果只有.bin或.img的固件，使用上面的两种方法</p><h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><p>重启之后，可能没有5G的wifi信号，拔掉电源，再开机就可以了</p><h4 id="以下是LEAN源码的说明文档"><a href="#以下是LEAN源码的说明文档" class="headerlink" title="以下是LEAN源码的说明文档"></a>以下是LEAN源码的说明文档</h4><p>﻿Welcome to Lean’s git source of OpenWrt and packages</p><p>中文：如何编译自己需要的 OpenWrt 固件</p><p>注意：<br> \1. 不要用 root 用户 git 和编译！！！<br> \2. 国内用户编译前最好准备好梯子<br> \3. 默认登陆IP 192.168.1.1, 密码 password</p><p>编译命令如下:</p><p>\1. 首先装好 Ubuntu 64bit，推荐 Ubuntu 14 LTS x64</p><p>\2. 命令行输入 sudo apt-get update ，然后输入<br> sudo apt-get install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils<br> 编译amule 需要安装额外的包 autoconf automake libtool autopoint</p><p>\3. git clone <a href="https://github.com/coolsnowwolf/lede">https://github.com/coolsnowwolf/lede</a> 命令下载好源代码，然后 cd lede 进入目录</p><p>\4. ./scripts/feeds update -a<br>  ./scripts/feeds install -a<br>  make menuconfig </p><p>\5. 最后选好你要的路由，输入 make -j1 V=s （-j1 后面是线程数。第一次编译推荐用单线程，国内请尽量全局科学上网）即可开始编译你要的固件了。</p><p>本套代码保证肯定可以编译成功。里面包括了 R8 所有源代码，包括 IPK 的。</p><p>你可以自由使用，但源码编译二次发布请注明我的 GitHub 仓库链接。谢谢合作！</p><p>特别提示：<br> \1. 源代码中绝不含任何后门和可以监控或者劫持你的 HTTPS 的闭源软件，SSL 安全是互联网最后的壁垒。安全干净才是固件应该做到的。<br> 2.如果你自认为 Koolshare 论坛或者其固件的脑残粉，本人不欢迎你使用本源代码。所以如果你是，那么使用过程中遇到任何问题本人概不回应。<br> 3.如有问题需要讨论，欢迎加入 QQ 讨论群：Gargoyle OpenWrt 编译大群 ,号码 610530025 ，加群链接 <a href="https://jq.qq.com/?_wv=1027&amp;k=5eA89Wv">https://jq.qq.com/?_wv=1027&amp;k=5eA89Wv</a></p><p>来自 <a href="https://github.com/coolsnowwolf/lede">https://github.com/coolsnowwolf/lede</a> </p><p>更新源码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git pull</span><br></code></pre></td></tr></table></figure><blockquote><p>LEAN的源码非常棒，一次成功！功能完善！</p><p>2019-1-2已将所有配置文件编译到固件中</p><p>方法在源码文件夹新建Files文件夹，将配置好的路由备份文件解压到这里，再按路由器的目录结构，补充备份文件中没有的脚本文件，比如wireguard的一系列文件。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>软路由</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软路由</tag>
      
      <tag>openwrt</tag>
      
      <tag>网件4300</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>openwrt挂载群晖samba</title>
    <link href="/2021/01/21/openwrt%E6%8C%82%E8%BD%BD%E7%BE%A4%E6%99%96samba/"/>
    <url>/2021/01/21/openwrt%E6%8C%82%E8%BD%BD%E7%BE%A4%E6%99%96samba/</url>
    
    <content type="html"><![CDATA[<p>挂载群晖的samba文件系统，xxx换成你自己群晖的用户名和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mount -t cifs //192.168.5.200/temp/baidu /mnt/samba -o iocharset=utf8,username=user,password=xxxxx<br></code></pre></td></tr></table></figure><p>挂载群晖的NFS文件系统，192.168.5.200是我群晖的地址</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mount -t nfs4 <span class="hljs-number">192.168</span>.<span class="hljs-number">5.200</span>:<span class="hljs-regexp">/volume5/</span>SSD <span class="hljs-regexp">/mnt/</span>nfs<br></code></pre></td></tr></table></figure><p>查看挂载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Df -hT<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软路由</category>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>linux</tag>
      
      <tag>路由</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows环境下Typora自定义又拍云上传脚本</title>
    <link href="/2021/01/20/20210120windows%E7%8E%AF%E5%A2%83%E4%B8%8Btypora%E5%8F%88%E6%8B%8D%E4%BA%91%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E8%84%9A%E6%9C%AC/"/>
    <url>/2021/01/20/20210120windows%E7%8E%AF%E5%A2%83%E4%B8%8Btypora%E5%8F%88%E6%8B%8D%E4%BA%91%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>最近把Githup page打开了，但是访问很慢，即使套上cloudfare也不理想，主要是图片问题，于是打算用图床，又拍云又可以拿出来用了。现在的流程是，windows下typora写文章，如果要插入本地图片，直接自动上传到又拍云，文章使用网络图库。但我又不想安装其它软件，以下是通过bash脚本使用api实现的过程和学习纪录。</p><a id="more"></a><p>第一个问题，用什么语言。我什么语言也不会，只能算接触过bash和python，之前用dnspod的API弄过 <a href="/2020/12/14/ipv6ddns/" title="IPV6的DDNS">IPV6的DDNS</a>，也算有点linux shell的经验，这次也就用它了。</p><p>第二个问题，windows有bash吗，有，win10有WSL子系统，可以直接用bash运行脚本。只是路径格式是个问题。</p><h3 id="Typora自定义命令行上传规则"><a href="#Typora自定义命令行上传规则" class="headerlink" title="Typora自定义命令行上传规则"></a>Typora自定义命令行上传规则</h3><p>需要先明白这个怎么运作的，typora命令行上传是比较简单的，将文件的全路径作为参数传递命令行，返回网址时只需要命令行返回一个Upload Success 和网址</p><p><img src="https://img.pluoluo.top/hexo/210120_mermaid2.jpg" alt="mermaid2"></p><h3 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h3><h4 id="API格式"><a href="#API格式" class="headerlink" title="API格式"></a>API格式</h4><p>网上少有shell命令的api脚本，搜来搜去只有一个脚本，但试了试失效了，看了官方文档，格式都变了，按文档自己写的话， 中间有一个验证制作过程有点复杂，要把文件长度，密码，时间放一起算一个md5，对我来说有点难，光符号要求的时间格式，我最翻了很久的资料。最后无意中找到了一个官方的工具，得到一个简单的方式，也就没再研究了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">BUCKET=<span class="hljs-string">&quot; &quot;</span> <span class="hljs-comment"># 云存储服务的名称</span><br>r_path=<span class="hljs-string">&quot;/path/&quot;</span> <span class="hljs-comment"># 上传默认的路径</span><br>USERNAME=<span class="hljs-string">&quot; &quot;</span>  <span class="hljs-comment">#操作员名</span><br>PASSWORD=<span class="hljs-string">&quot; &quot;</span> <span class="hljs-comment"># 操作员密码</span><br>dt=`date -u +%a,<span class="hljs-string">&quot; &quot;</span>%d<span class="hljs-string">&quot; &quot;</span>%b<span class="hljs-string">&quot; &quot;</span>%Y<span class="hljs-string">&quot; &quot;</span>%T<span class="hljs-string">&quot; &quot;</span>GMT` <span class="hljs-comment">#时间戳</span><br>secret=`<span class="hljs-built_in">echo</span> -n <span class="hljs-variable">$&#123;PASSWORD&#125;</span> | md5sum | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`  <span class="hljs-comment">#密码加密</span><br>domain=<span class="hljs-string">&quot; &quot;</span> <span class="hljs-comment"># 对象存储绑定的域名</span><br><span class="hljs-comment">#上传，-w %&#123;http_code&#125;是获取状态码</span><br>curl -X PUT http://v0.api.upyun.com/<span class="hljs-variable">$&#123;BUCKET&#125;</span><span class="hljs-variable">$&#123;r_path&#125;</span> -H <span class="hljs-string">&quot;Authorization: Basic <span class="hljs-variable">$&#123;auth_h&#125;</span>&quot;</span> -H <span class="hljs-string">&quot;x-gmkerl-thumb: /max/2500/rotate/auto/quality/80&quot;</span> -T <span class="hljs-string">&quot;&#123;<span class="hljs-variable">$r_fullname</span>&#125;&quot;</span>  -w %&#123;http_code&#125; -s<br></code></pre></td></tr></table></figure><p>后期使用中发现在移动端有些照片不能自动修正旋转，于是加上一个预处理参数，顺便限定尺寸和压缩质量。参数是<em>x-gmkerl-thumb:</em> 详情参见<a href="https://help.upyun.com/knowledge-base/image/#function">官方文件</a></p><h4 id="路径处理"><a href="#路径处理" class="headerlink" title="路径处理"></a>路径处理</h4><p>第一个要处理的是文件路径，windows的文件路径与wsl的不同，需要转换，这部分就是字符串的处理。</p><p>windows的路径是这样的</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">D:<span class="hljs-symbol">\t</span>emp<span class="hljs-symbol">\5</span>18c<span class="hljs-symbol">\i</span>mages<span class="hljs-symbol">\r</span>ace<span class="hljs-symbol">\p</span>r1.jpg<br></code></pre></td></tr></table></figure><p>需要转换成WSL linux格式的，这样</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mnt<span class="hljs-regexp">/d/</span>temp<span class="hljs-regexp">/518c/im</span>ages<span class="hljs-regexp">/race/</span>pr1.jpg<br></code></pre></td></tr></table></figure><p>区别就是盘符和分隔符，先把路径分三段，盘符、中间路径、文件名，这个过程中又学到了一种截取字符串的方式。</p><h4 id="改文件名"><a href="#改文件名" class="headerlink" title="改文件名"></a>改文件名</h4><p>为了防止文件名重复，上传的文件都将在原文件名前加上日期。又拍云API有改名的，不过按照文档中的格式写，怎么也过不了，提示缺‘BUCKET NAME’，于是只能在本地操作改名，上传之后再改回来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">dr=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;i:0:1&#125;</span>&quot;</span>                                   <span class="hljs-comment">#从0（第一个字符）开始，截取1个字符，即盘符</span><br>dr=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dr,,&#125;</span>&quot;</span>                                    <span class="hljs-comment">#盘符要转成小写，待用</span><br>path_b=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;i#*\\&#125;</span>&quot;</span>                               <span class="hljs-comment">#以左数第一个\为分隔，保留右边的，就是删去了盘符</span><br>dl=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;path_b//\\/\/&#125;</span>&quot;</span>                           <span class="hljs-comment">#用/替换所有的\，待用</span><br>l_path=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dl%\/*&#125;</span>&quot;</span>                              <span class="hljs-comment">#以右数第一个/为分隔，保留左边的，即中间路径</span><br>o_name=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dl##*\/&#125;</span>&quot;</span>                             <span class="hljs-comment">#以左数最后一个/为分隔，保留右边的，即原文件名</span><br>o_fullname=<span class="hljs-string">&quot;/mnt/&quot;</span><span class="hljs-variable">$dr</span><span class="hljs-string">&quot;/&quot;</span><span class="hljs-variable">$dl</span>                     <span class="hljs-comment">#拼接成完整linux格式的原文件路径</span><br>r_name=<span class="hljs-variable">$dt2</span><span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-variable">$o_name</span>                           <span class="hljs-comment">#拼接成新的文件名</span><br>r_fullname=<span class="hljs-string">&quot;/mnt/&quot;</span><span class="hljs-variable">$dr</span><span class="hljs-string">&quot;/&quot;</span><span class="hljs-variable">$l_path</span><span class="hljs-string">&quot;/&quot;</span><span class="hljs-variable">$r_name</span>       <span class="hljs-comment">#拼接成完整linux格式的新文件路径</span><br></code></pre></td></tr></table></figure><h4 id="脚本全文"><a href="#脚本全文" class="headerlink" title="脚本全文"></a>脚本全文</h4><p>有点乱，用起来没问题。</p><p>有一个问题，映射磁盘的文件wsl找不到，我也不知道怎么找，如果需要插入映射磁盘文件，建议让typora自动复制到本地磁盘，然后右键上传。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 各类配置信息</span><br>BUCKET=<span class="hljs-string">&quot; &quot;</span> <span class="hljs-comment"># 云存储服务的名称</span><br>r_path=<span class="hljs-string">&quot;/path/&quot;</span> <span class="hljs-comment"># 上传默认的路径</span><br>USERNAME=<span class="hljs-string">&quot; &quot;</span>  <span class="hljs-comment">#操作员名</span><br>PASSWORD=<span class="hljs-string">&quot; &quot;</span> <span class="hljs-comment"># 操作员密码</span><br>dt=`date -u +%a,<span class="hljs-string">&quot; &quot;</span>%d<span class="hljs-string">&quot; &quot;</span>%b<span class="hljs-string">&quot; &quot;</span>%Y<span class="hljs-string">&quot; &quot;</span>%T<span class="hljs-string">&quot; &quot;</span>GMT`    <span class="hljs-comment">#时间戳</span><br>secret=`<span class="hljs-built_in">echo</span> -n <span class="hljs-variable">$&#123;PASSWORD&#125;</span> | md5sum | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>`  <span class="hljs-comment">#密码加密</span><br>domain=<span class="hljs-string">&quot; &quot;</span>           <span class="hljs-comment"># 对象存储绑定的域名</span><br>dt2=`date +%y%m%d`   <span class="hljs-comment">#6位日期格式</span><br>out=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;200&quot;</span><br>signature=`<span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;USERNAME&#125;</span>:<span class="hljs-variable">$&#123;PASSWORD&#125;</span>&quot;</span> | base64` <br><br>auth_h=`<span class="hljs-built_in">echo</span> -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;USERNAME&#125;</span>:<span class="hljs-variable">$&#123;PASSWORD&#125;</span>&quot;</span> | base64`<br><span class="hljs-function"><span class="hljs-title">update_file</span></span>() &#123;<br>  update=$(curl -X PUT http://v0.api.upyun.com/<span class="hljs-variable">$&#123;BUCKET&#125;</span><span class="hljs-variable">$&#123;r_path&#125;</span> -H <span class="hljs-string">&quot;Authorization: Basic <span class="hljs-variable">$&#123;auth_h&#125;</span>&quot;</span> -T <span class="hljs-string">&quot;&#123;<span class="hljs-variable">$r_fullname</span>&#125;&quot;</span>  -w %&#123;http_code&#125; -s)<br>   &#125;<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span>; <span class="hljs-keyword">do</span><br><span class="hljs-comment">#处理windows格式的文件路径</span><br>dr=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;i:0:1&#125;</span>&quot;</span>                                   <span class="hljs-comment">#从0（第一个字符）开始，截取1个字符，即盘符</span><br>dr=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dr,,&#125;</span>&quot;</span>                                    <span class="hljs-comment">#盘符要转成小写，待用</span><br>path_b=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;i#*\\&#125;</span>&quot;</span>                               <span class="hljs-comment">#以左数第一个\为分隔，保留右边的，就是删去了盘符</span><br>dl=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;path_b//\\/\/&#125;</span>&quot;</span>                           <span class="hljs-comment">#用/替换所有的\，待用</span><br>l_path=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dl%\/*&#125;</span>&quot;</span>                              <span class="hljs-comment">#以右数第一个/为分隔，保留左边的，即中间路径</span><br>o_name=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;dl##*\/&#125;</span>&quot;</span>                             <span class="hljs-comment">#以左数最后一个/为分隔，保留右边的，即原文件名</span><br>o_fullname=<span class="hljs-string">&quot;/mnt/&quot;</span><span class="hljs-variable">$dr</span><span class="hljs-string">&quot;/&quot;</span><span class="hljs-variable">$dl</span>                     <span class="hljs-comment">#拼接成完整linux格式的原文件路径</span><br>r_name=<span class="hljs-variable">$dt2</span><span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-variable">$o_name</span>                           <span class="hljs-comment">#拼接成新的文件名</span><br>r_fullname=<span class="hljs-string">&quot;/mnt/&quot;</span><span class="hljs-variable">$dr</span><span class="hljs-string">&quot;/&quot;</span><span class="hljs-variable">$l_path</span><span class="hljs-string">&quot;/&quot;</span><span class="hljs-variable">$r_name</span>       <span class="hljs-comment">#拼接成完整linux格式的新文件路径</span><br>mv <span class="hljs-variable">$o_fullname</span> <span class="hljs-variable">$r_fullname</span>                      <span class="hljs-comment">#Change Original filename to remote filename </span><br><span class="hljs-comment">#上传</span><br>update_file  <br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$update</span> == *<span class="hljs-variable">$test</span>* ]]; <span class="hljs-keyword">then</span><br>out=<span class="hljs-string">&quot;<span class="hljs-variable">$out</span>\n$domain$r_path<span class="hljs-variable">$r_name</span>&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$o_name</span> upload success&quot;</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;API UPDATE FAILED. DUMPING RESULTS:\n<span class="hljs-variable">$update</span>&quot;</span><br>mv <span class="hljs-variable">$r_fullname</span> <span class="hljs-variable">$o_fullname</span>                     <span class="hljs-comment">#Change remote filename back to original filename</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>mv <span class="hljs-variable">$r_fullname</span> <span class="hljs-variable">$o_fullname</span>                     <span class="hljs-comment">#Change remote filename back to original filename </span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;Upload Success:\n<span class="hljs-variable">$out</span>&quot;</span><br><br><br></code></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>格式——图像——全局图像设置</p><p><img src="https://img.pluoluo.top/hexo/210120_typoraimg.jpg"></p><p>如果没有使用网络驱动器或其它的映射磁盘，可以在插入图片时里，选自动上传。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>shell脚本</tag>
      
      <tag>网站</tag>
      
      <tag>又拍云</tag>
      
      <tag>api</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NPS内网穿透实际操作</title>
    <link href="/2021/01/07/nps/"/>
    <url>/2021/01/07/nps/</url>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ol><li>我所有到手的服务器都用debian系统</li><li>域名解释到位</li></ol><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~<br>wget https://github.com/cnlh/nps/releases/download/v0.23.2/linux_amd64_server.tar.gz<br>tar xzvf linux_amd64_server.tar.gz<br><span class="hljs-built_in">cd</span> ~/nps<br><span class="hljs-comment">##在nps目录下面会有一个nps可执行文件、conf配置目录和web网页目录，我们只需要修改conf/nps.conf即可：</span><br><br>vi conf/nps.conf<br><span class="hljs-comment">##这里我们需要改一下#web下面的几个参数，</span><br>web_host=a.pluoluo.ml    <span class="hljs-comment">#你的服务器IP或者域名</span><br>web_username=admin       <span class="hljs-comment">#或者换成别的,控制面板的用户名</span><br>web_password=password    <span class="hljs-comment">#控制面板的密码</span><br>web_port=8080            <span class="hljs-comment">#控制面板的端口，可以改成你想要的端口 </span><br>bridge_port=8024         <span class="hljs-comment">#客户端连接端口</span><br>bridge_type=kcp          <span class="hljs-comment">#为了保存性能，我使用kcp</span><br><br><span class="hljs-comment">##需要https的还要把证书上传并指定路径</span><br>https_default_cert_file=conf/server.pem<br>https_default_ky_file=conf/server.key<br><span class="hljs-comment">##需要http缓存可以打开</span><br>http_cache=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>其他貌似也不需要怎么修改，为了安全起见还是不要用默认用户名和密码。关于具体的配置可以看项目<a href="https://github.com/ehang-io/nps/blob/master/README_zh.md">README</a>。<br>修改完成之后，直接启动服务器（默认daemon方式启动）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./nps start    <span class="hljs-comment">#自动守护进程</span><br></code></pre></td></tr></table></figure><p>服务器端代码部署完成</p><p>打开web_host:web_port，进入控制台网页</p><p><img src="https://img.pluoluo.top/hexo/001.png"></p><p>添加客户端</p><p>basic权限认证可以不填</p><p><img src="/2021/01/07/nps/002.png"></p><p>客户端添加完会得到一个ID号好一个客户端验证码vkey</p><p> 添加域名解释，即是设置本地穿透端口和协议，把frp本地的设置放到了服务器端的控制面板了。注意选择客户端ID</p><p><img src="/2021/01/07/nps/003.png"></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端设置非常简单，下载执行文件，传到客户机，直接运行就可以了，不需要配置。</p><p>以守护方式运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/npc start -server=<span class="hljs-variable">$host</span>:<span class="hljs-variable">$port</span> -vkey=密钥 -<span class="hljs-built_in">type</span>=kcp <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>内网穿透</tag>
      
      <tag>nps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖root账号启用</title>
    <link href="/2021/01/07/synology-2/"/>
    <url>/2021/01/07/synology-2/</url>
    
    <content type="html"><![CDATA[<p>6.0以后SSH需要用admin帐号登录，再sudo，到root权限，，但winscp没办法，所以得启用root帐号，方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -i<br>synouser –setpw root xxx<br></code></pre></td></tr></table></figure><p>(xxx是你打算要修改的root的密码 建议修改成和admin账户一样，注意–前有一个空格），按一下Enter键出现绿色字体的root@xxx，这样就成功了。 之后你可以进winscp 用root户名和你刚修改的密码登陆了。之后的权限修改操作都用winscp这个软件。</p><p>2018年12月10日11:56:37</p><p>更新到6.2之后，创建root用户有点区别</p><p>需要修改sshd_config文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -i<br>chmod 755 /etc/ssh/sshd_config <span class="hljs-comment">#修改权限</span><br>vi /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>将  #PermitRootLogin prohibit password  修改为：PermitRootLogin yes </p><p>：wq保存退出</p><p>再输入</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">synouser <span class="hljs-comment">--setpw root xxx</span><br></code></pre></td></tr></table></figure><p>然后重启就可以了</p>]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>群晖使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pandas表格处理</title>
    <link href="/2021/01/06/pandas%E8%A1%A8%E6%A0%BC%E5%A4%84%E7%90%86/"/>
    <url>/2021/01/06/pandas%E8%A1%A8%E6%A0%BC%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>读取csv的指定行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">pd.read_csv(<span class="hljs-string">&#x27;../input/sample_submission.csv&#x27;</span>,nrows=<span class="hljs-number">10</span>)           <span class="hljs-comment">#读取前10行</span><br>pd.read_csv(<span class="hljs-string">&#x27;../input/sample_submission.csv&#x27;</span>,skiprows=n)         <span class="hljs-comment">#读取第n行以后的</span><br>pd.read_csv(<span class="hljs-string">&#x27;../input/sample_submission.csv&#x27;</span>,skiprows=<span class="hljs-number">5</span>,nrows=<span class="hljs-number">10</span>)<span class="hljs-comment">#读取第n行后的10行</span><br><br><span class="hljs-comment">#读取最后n行</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;../input/sample_submission.csv&#x27;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    reader = csv.reader(f,delimiter = <span class="hljs-string">&quot;,&quot;</span>)<br>    data = <span class="hljs-built_in">list</span>(reader)<br>    row_count = <span class="hljs-built_in">len</span>(data)<br><br>df = pd.read_csv(<span class="hljs-string">&#x27;../input/sample_submission.csv&#x27;</span>, skiprows = row_count - N)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python&amp;airtest爬取朋友圈文字</title>
    <link href="/2020/12/25/python-%E7%88%AC%E8%99%AB1/"/>
    <url>/2020/12/25/python-%E7%88%AC%E8%99%AB1/</url>
    
    <content type="html"><![CDATA[<p>有人的朋友圈发了很多东西，多到自己都不记得发了些什么，我想帮他把朋友圈的文字全爬下来，于是尝试写一个python爬虫。</p><p>主要使用了，airtest、pocoui、VScode。</p><p>参考：</p><p>​    <a href="https://cloud.tencent.com/developer/article/1539986">https://cloud.tencent.com/developer/article/1539986</a></p><p>​    <a href="https://airtest.doc.io.netease.com/">https://airtest.doc.io.netease.com/</a></p><h3 id="airtest操作"><a href="#airtest操作" class="headerlink" title="airtest操作"></a>airtest操作</h3><p>初步airtest使用参考链接写的比较详细，走一遍就会了。重点是手机端需要把<code>开发者选项</code> 和<code>usb调试</code>及各种权限打开，airtest会给手机装两三个app</p><p>操作方法很简单，基本就是获取手机界面上自己要自动化的元素id，在airtest上非常简单，直接双击节点就可以得到元素id，如`poco(“com.tencent.mm:id/nm”)，到了脚本编辑框，可以给元素id各种操作。</p><ol><li><p>点击——在后面加.<code>click()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">poco(<span class="hljs-string">&quot;com.tencent.mm:id/nm&quot;</span>).click()<br></code></pre></td></tr></table></figure></li><li><p>获取text值（获取其它项的值另有写法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">poco(<span class="hljs-string">&quot;com.tencent.mm:id/nm&quot;</span>).get_text()<br></code></pre></td></tr></table></figure></li><li><p>输入文字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">text(<span class="hljs-string">&quot;输入内容&quot;</span>)  <span class="hljs-comment">#要在当前选中文本框的情况下</span><br></code></pre></td></tr></table></figure></li><li><p>滑动屏幕</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">swipe((<span class="hljs-number">330</span>,<span class="hljs-number">2280</span>),(<span class="hljs-number">330</span>, <span class="hljs-number">1500</span>))    <span class="hljs-comment">#从一个点划到另一个点，点坐标可以打开airtest选项中的坐标，直接看到。</span><br></code></pre></td></tr></table></figure><p>我这次用到的就这4个操作，手机主要也就是点划操作。</p><p>重要的是循环逻辑，更重要的是我不逻辑，我瞎弄了一个，竟然可以跑。</p><p>以下是代码</p><h3 id="循环逻辑"><a href="#循环逻辑" class="headerlink" title="循环逻辑"></a>循环逻辑</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> True:<br>    i = 0<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(11):<br>        try:<br>            poco(<span class="hljs-string">&quot;com.tencent.mm:id/g2s&quot;</span>).child(<span class="hljs-string">&quot;android.widget.FrameLayout&quot;</span>).child(<span class="hljs-string">&quot;android.widget.LinearLayout&quot;</span>).offspring(<span class="hljs-string">&quot;com.tencent.mm:id/fol&quot;</span>).child(<span class="hljs-string">&quot;com.tencent.mm:id/b3b&quot;</span>)[i].child(<span class="hljs-string">&quot;com.tencent.mm:id/d2s&quot;</span>).offspring(<span class="hljs-string">&quot;com.tencent.mm:id/b__&quot;</span>).click()<br>            time = poco(<span class="hljs-string">&quot;android:id/text1&quot;</span>).get_text()<br>            context=poco(<span class="hljs-string">&quot;com.tencent.mm:id/fmp&quot;</span>).get_text()<br>            <span class="hljs-built_in">print</span>(time,context)<br>            row = [time,context]    <br>            <span class="hljs-built_in">print</span>()<br>            <span class="hljs-built_in">print</span>(row,file = f)<br>            sleep(1)<br>            poco(<span class="hljs-string">&quot;com.tencent.mm:id/dn&quot;</span>).click()        <br>        except:<br>            pass<br>    <br>  <span class="hljs-comment">#  dev = device()  # 获取当前手机设备</span><br>    <span class="hljs-comment">#print(row)</span><br>    swipe((330,2280),(330, 1500))  <span class="hljs-comment"># 向上滑动    </span><br>    sleep(0.5)  <span class="hljs-comment"># 暂停 0.5 秒</span><br>    swipe((330,1500),(330, 770))  <span class="hljs-comment"># 向上滑动    </span><br>    sleep(0.5)  <span class="hljs-comment"># 暂停 0.5 秒</span><br></code></pre></td></tr></table></figure><p>解释一下，参考资料里的循环我大概懂，就是将一个父节点做个范围，遍历下面的子节点，因为需求，到达的界面不同，我获取到的id是这样的，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">poco(<span class="hljs-string">&quot;com.tencent.mm:id/g2s&quot;</span>).child(<span class="hljs-string">&quot;android.widget.FrameLayout&quot;</span>).child(<span class="hljs-string">&quot;android.widget.LinearLayout&quot;</span>).offspring(<span class="hljs-string">&quot;com.tencent.mm:id/fol&quot;</span>).child(<span class="hljs-string">&quot;com.tencent.mm:id/b3b&quot;</span>)[<span class="hljs-number">0</span>].child(<span class="hljs-string">&quot;com.tencent.mm:id/d2s&quot;</span>).offspring(<span class="hljs-string">&quot;com.tencent.mm:id/b__&quot;</span>)<br></code></pre></td></tr></table></figure><p>我也不知道怎么写这个父节点，比对了之后发现中间有一个[0]，每屏里只有这个数是每条不一样的，试过从这里分段，前面设做范围条件，结果不行。那我直接遍历这个数就不可以了嘛，就是代码难看点。</p><p>每页最多11条，我就设了一个11为范围。循环得不错。</p><p>swipe我分了两次，是因为有时候上滑到没有加载过的页面，需要时间加载，我给他点时间。</p><p>现在还有最后一样没弄好了，就是输出，我怎么也输出不了。后面发现airtest的python没办法加模块，得自己本地配一个环境。于是有了这一段文章 <a href="/2020/12/24/python-001/" title="python虚拟环境">python虚拟环境</a>。后面部份我就转到VScode里去了。</p></li></ol><p>最终能跑的代码是这样的，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python">__author__ = <span class="hljs-string">&quot;sahnp&quot;</span><br><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> airtest.core.api <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> airtest.cli.parser <span class="hljs-keyword">import</span> cli_setup<br><span class="hljs-keyword">from</span> poco.drivers.android.uiautomation <span class="hljs-keyword">import</span> AndroidUiautomationPoco<br>poco = AndroidUiautomationPoco(use_airtest_input=<span class="hljs-literal">True</span>, screenshot_each_action=<span class="hljs-literal">False</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cli_setup():<br>    auto_setup(__file__, logdir=<span class="hljs-literal">True</span>, devices=[<br>            <span class="hljs-string">&quot;Android://127.0.0.1:5037/e733a3f1&quot;</span>,<br>    ])<br><br><br><span class="hljs-comment"># script content</span><br>print(<span class="hljs-string">&quot;start...&quot;</span>)<br><br><br><span class="hljs-comment"># generate html report</span><br><span class="hljs-comment"># from airtest.report.report import simple_report</span><br><span class="hljs-comment"># simple_report(__file__, logpath=True)</span><br><br>start_app(<span class="hljs-string">&#x27;com.tencent.mm&#x27;</span>)  <span class="hljs-comment"># 启动微信</span><br>sleep()<br>poco(<span class="hljs-string">&quot;com.tencent.mm:id/f8y&quot;</span>).click()     <span class="hljs-comment">#点搜索</span><br>sleep(<span class="hljs-number">1</span>)<br>text(<span class="hljs-string">&quot;朋友的昵称&quot;</span>)                  <span class="hljs-comment">#输入名字</span><br>sleep(<span class="hljs-number">1</span>)<br>poco(<span class="hljs-string">&quot;com.tencent.mm:id/gbv&quot;</span>).click()       <span class="hljs-comment">#点头像</span><br>poco(<span class="hljs-string">&quot;com.tencent.mm:id/cj&quot;</span>).click()        <span class="hljs-comment">#点三点</span><br>poco(<span class="hljs-string">&quot;com.tencent.mm:id/f3y&quot;</span>).click()       <span class="hljs-comment">#点头像</span><br>poco(<span class="hljs-string">&quot;com.tencent.mm:id/ja&quot;</span>).click()        <span class="hljs-comment">#点朋友圈</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pyq.csv&#x27;</span>, <span class="hljs-string">&quot;w&quot;</span>, newline=<span class="hljs-string">&quot;&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8-sig&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    csv_write = csv.writer(f)<br>    csv_head = [<span class="hljs-string">&quot;时间&quot;</span>, <span class="hljs-string">&quot;文本内容&quot;</span>]<br>    csv_write.writerow(csv_head)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    i = <span class="hljs-number">0</span><br>    out = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;pyq.csv&quot;</span>, <span class="hljs-string">&quot;a+&quot;</span>, newline=<span class="hljs-string">&quot;&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8-sig&quot;</span>)<br>    csv_writer = csv.writer(out, dialect=<span class="hljs-string">&quot;excel&quot;</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">11</span>):<br>        <span class="hljs-keyword">try</span>:<br>            poco(<span class="hljs-string">&quot;com.tencent.mm:id/g2s&quot;</span>).child(<span class="hljs-string">&quot;android.widget.FrameLayout&quot;</span>).child(<span class="hljs-string">&quot;android.widget.LinearLayout&quot;</span>).offspring(<span class="hljs-string">&quot;com.tencent.mm:id/fol&quot;</span>).child(<span class="hljs-string">&quot;com.tencent.mm:id/b3b&quot;</span>)[i].child(<span class="hljs-string">&quot;com.tencent.mm:id/d2s&quot;</span>).offspring(<span class="hljs-string">&quot;com.tencent.mm:id/b__&quot;</span>).click()<br>            time = poco(<span class="hljs-string">&quot;android:id/text1&quot;</span>).get_text()<br>            context=poco(<span class="hljs-string">&quot;com.tencent.mm:id/fmp&quot;</span>).get_text()<br>            print(time, context)<br>            row = [time, context]<br>            csv_writer.writerow(row)<br>            print()<br>            poco(<span class="hljs-string">&quot;com.tencent.mm:id/dn&quot;</span>).click()<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>    <br>    out.close()<br>    swipe((<span class="hljs-number">330</span>,<span class="hljs-number">2280</span>),(<span class="hljs-number">330</span>, <span class="hljs-number">1500</span>))  <span class="hljs-comment"># 向上滑动 </span><br>    sleep(<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># 暂停 2.5 秒</span><br>    swipe((<span class="hljs-number">330</span>,<span class="hljs-number">1500</span>),(<span class="hljs-number">330</span>, <span class="hljs-number">770</span>))  <span class="hljs-comment"># 向上滑动 </span><br>    sleep(<span class="hljs-number">0.5</span>)  <span class="hljs-comment"># 暂停 2.5 秒</span><br><br><br></code></pre></td></tr></table></figure><p>但是这个代码有一个大缺点，因为微信退出这个朋友圈列表，再进就得从头开始浏览，非常不方便定位，微信这点做得不好，设个时间过滤能死啊。程序跑起来，停了再进，会有很麻烦。</p><p>他也有一个时间过滤，（粗的，月为单位，有人每月上千条），需要从搜索那个页面点朋友圈，也就是搜索朋友圈，到搜索朋友圈这个页面之后，我就无法获取页面元素了，试过很多方法，都获取不了。使用uiautomator也是不行。</p><p>所以放弃这个项目。现在爬下来几百条信息，以后做python学习素材。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python虚拟环境virtualenv的用法</title>
    <link href="/2020/12/24/python-001/"/>
    <url>/2020/12/24/python-001/</url>
    
    <content type="html"><![CDATA[<p>因为想写一个简单的爬虫，用了到airtest，结果这货不支持电脑现在装的python3.8，又不想删了重装，于是又找到了虚拟环境的virtualenv，以下是配置过程。</p><ol><li><p>首先的安装python3.6，这步就略过，不需要加入到系统环境路径。</p></li><li><p>安装virtualenv</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install virtualenv<br></code></pre></td></tr></table></figure><p>这一步也出错了，提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Could not fetch URL https://pypi.org/simple/virtualenv/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host=&#x27;pypi.org&#x27;, port=443): Max retries exceeded with url: /simple/virtualenv/ (Caused by SSLError(SSLEOFError(8, &#x27;EOF occurred in violation of protocol (_ssl.c:1124)&#x27;))) - skipping<br></code></pre></td></tr></table></figure></li></ol><p>搜索后有了方案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install virtualenv -i http://pypi.douban.com/simple --trusted-host pypi.douban.com            <span class="hljs-comment">#表示将镜像地址切换为国内，这里切换到了豆瓣</span><br><span class="hljs-comment">#常用的镜像地址有： </span><br><span class="hljs-comment"># http://mirrors.aliyun.com/pypi/simple/    阿里云</span><br><span class="hljs-comment"># https://pypi.mirrors.ustc.edu.cn/simple/ 中国科技大学</span><br><span class="hljs-comment"># http://pypi.douban.com/simple/    豆瓣</span><br><span class="hljs-comment"># https://pypi.tuna.tsinghua.edu.cn/simple/   清华大学</span><br><span class="hljs-comment"># http://pypi.mirrors.ustc.edu.cn/simple/ 中国科学技术大学</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>接下来创建虚拟环境目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd path   #先到自己想要存放的目录<br>virtualenv -p C:\Users\sahnp\AppData\Local\Programs\Python\Python36\python.exe pyq         #-p 后面是python3.6的绝对路径，后面的pyq是环境目录<br></code></pre></td></tr></table></figure></li><li><p>激活虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd pyq<br>Scripts\activate         #激活<br></code></pre></td></tr></table></figure></li><li><p>检查一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -V           #检查python版本<br>Python 3.6.6<br>pip -V              #检查pip版本<br>pip 20.3.1 from C:\Users\sahnp\pyq\lib\site-packages\pip (python 3.6)<br></code></pre></td></tr></table></figure></li><li><p>使用，现在可以直接使用python3.6.6版本了，使用pip安装的依赖包都是装在这个目录下的，不会影响系统环境。</p></li><li><p>退出虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">deactivate<br></code></pre></td></tr></table></figure><p>退出之后就回到了系统环境，虚拟环境是要从目录中进入的，如果忘记目录地址就不能再用了。</p></li><li><p>删除虚拟环境</p><p>直接删目录</p></li><li><p>vscode里使用。因为安全原因，power shell不能运行脚本，正常情况是不能开启虚拟环境，运行以下命令即可开启脚本运行权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Set-ExecutionPolicy -ExecutionPolicy UNRESTRICTED<br></code></pre></td></tr></table></figure><p>不过这个只是当前终端使用，测试代码不行</p><p>在vs命令面板运行</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">select</span> interpreter<br>entire <span class="hljs-keyword">workspace</span><br></code></pre></td></tr></table></figure><p>在第一项<code>enter interpreter path</code> 里选择虚拟环境的绝对路径，~\pyq\Scripts，即可以使用。</p><p>也可以先在设置里把这个路径加到python的env path中去，这里就可以直接选用了。</p><p>方法是，打开设置，搜索<code>env</code> 分项里选<code>python</code> ，右边可以找到 <code>Python: Venv Path</code> ，</p><p>如果只想在一个项目中使用，可以把项目文件夹加入到工作区，在刚才设置那一步中就可以看到文件夹的分栏了。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux awk命令</title>
    <link href="/2020/12/23/linux-004/"/>
    <url>/2020/12/23/linux-004/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-awk-命令"><a href="#Linux-awk-命令" class="headerlink" title="Linux awk 命令"></a>Linux awk 命令</h1><p><a href="https://www.runoob.com/linux/linux-command-manual.html"><img src="https://www.runoob.com/images/up.gif" alt="Linux 命令大全"> Linux 命令大全</a></p><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。</p><p>之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi">awk [选项参数] <span class="hljs-string">&#x27;script&#x27;</span> <span class="hljs-keyword">var</span>=value <span class="hljs-keyword">file</span>(s)<br>或<br>awk [选项参数] -f scriptfile <span class="hljs-keyword">var</span>=value <span class="hljs-keyword">file</span>(s)<br></code></pre></td></tr></table></figure><p><strong>选项参数说明：</strong></p><ul><li>-F fs or –field-separator fs<br>指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。</li><li>-v var=value or –asign var=value<br>赋值一个用户定义变量。</li><li>-f scripfile or –file scriptfile<br>从脚本文件中读取awk命令。</li><li>-mf nnn and -mr nnn<br>对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。</li><li>-W compact or –compat, -W traditional or –traditional<br>在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。</li><li>-W copyleft or –copyleft, -W copyright or –copyright<br>打印简短的版权信息。</li><li>-W help or –help, -W usage or –usage<br>打印全部awk选项和每个选项的简短说明。</li><li>-W lint or –lint<br>打印不能向传统unix平台移植的结构的警告。</li><li>-W lint-old or –lint-old<br>打印关于不能向传统unix平台移植的结构的警告。</li><li>-W posix<br>打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符<strong>和</strong>=不能代替^和^=；fflush无效。</li><li>-W re-interval or –re-inerval<br>允许间隔正则表达式的使用，参考(grep中的Posix字符类)，如括号表达式[[:alpha:]]。</li><li>-W source program-text or –source program-text<br>使用program-text作为源代码，可与-f命令混用。</li><li>-W version or –version<br>打印bug报告信息的版本。</li></ul><hr><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>log.txt文本内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">2 this is a <span class="hljs-built_in">test</span><br>3 Are you like awk<br>This<span class="hljs-string">&#x27;s a test</span><br><span class="hljs-string">10 There are orange,apple,mongo</span><br></code></pre></td></tr></table></figure><p>用法一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;&#123;[pattern] action&#125;&#x27;</span> &#123;filenames&#125;   <span class="hljs-comment"># 行匹配语句 awk &#x27;&#x27; 只能用单引号</span><br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 每行按空格或TAB分割，输出文本中的1、4项</span><br> $ awk <span class="hljs-string">&#x27;&#123;print $1,$4&#125;&#x27;</span> log.txt<br> ---------------------------------------------<br> 2 a<br> 3 like<br> This<span class="hljs-string">&#x27;s</span><br><span class="hljs-string"> 10 orange,apple,mongo</span><br><span class="hljs-string"> # 格式化输出</span><br><span class="hljs-string"> $ awk &#x27;</span>&#123;<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%-8s %-10s\n&quot;</span>,<span class="hljs-variable">$1</span>,<span class="hljs-variable">$4</span>&#125;<span class="hljs-string">&#x27; log.txt</span><br><span class="hljs-string"> ---------------------------------------------</span><br><span class="hljs-string"> 2        a</span><br><span class="hljs-string"> 3        like</span><br><span class="hljs-string"> This&#x27;</span>s<br> 10       orange,apple,mongo<br> <br></code></pre></td></tr></table></figure><p>用法二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk -F  <span class="hljs-comment">#-F相当于内置变量FS, 指定分割字符</span><br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 使用&quot;,&quot;分割</span><br> $  awk -F, <span class="hljs-string">&#x27;&#123;print $1,$2&#125;&#x27;</span>   log.txt<br> ---------------------------------------------<br> 2 this is a <span class="hljs-built_in">test</span><br> 3 Are you like awk<br> This<span class="hljs-string">&#x27;s a test</span><br><span class="hljs-string"> 10 There are orange apple</span><br><span class="hljs-string"> # 或者使用内建变量</span><br><span class="hljs-string"> $ awk &#x27;</span>BEGIN&#123;FS=<span class="hljs-string">&quot;,&quot;</span>&#125; &#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$1</span>,<span class="hljs-variable">$2</span>&#125;<span class="hljs-string">&#x27;     log.txt</span><br><span class="hljs-string"> ---------------------------------------------</span><br><span class="hljs-string"> 2 this is a test</span><br><span class="hljs-string"> 3 Are you like awk</span><br><span class="hljs-string"> This&#x27;</span>s a <span class="hljs-built_in">test</span><br> 10 There are orange apple<br> <span class="hljs-comment"># 使用多个分隔符.先使用空格分割，然后对分割结果再使用&quot;,&quot;分割</span><br> $ awk -F <span class="hljs-string">&#x27;[ ,]&#x27;</span>  <span class="hljs-string">&#x27;&#123;print $1,$2,$5&#125;&#x27;</span>   log.txt<br> ---------------------------------------------<br> 2 this <span class="hljs-built_in">test</span><br> 3 Are awk<br> This<span class="hljs-string">&#x27;s a</span><br><span class="hljs-string"> 10 There apple</span><br></code></pre></td></tr></table></figure><p>用法三：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk -v  <span class="hljs-comment"># 设置变量</span><br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk -va=1 <span class="hljs-string">&#x27;&#123;print $1,$1+a&#125;&#x27;</span> log.txt<br>---------------------------------------------<br>2 3<br>3 4<br>This<span class="hljs-string">&#x27;s 1</span><br><span class="hljs-string">10 11</span><br><span class="hljs-string">$ awk -va=1 -vb=s &#x27;</span>&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$1</span>,<span class="hljs-variable">$1</span>+a,<span class="hljs-variable">$1b</span>&#125;<span class="hljs-string">&#x27; log.txt</span><br><span class="hljs-string">---------------------------------------------</span><br><span class="hljs-string">2 3 2s</span><br><span class="hljs-string">3 4 3s</span><br><span class="hljs-string">This&#x27;</span>s 1 This<span class="hljs-string">&#x27;ss</span><br><span class="hljs-string">10 11 10s</span><br></code></pre></td></tr></table></figure><p>用法四：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk -f &#123;awk脚本&#125; &#123;文件名&#125;<br></code></pre></td></tr></table></figure><p>实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk -f cal.awk log.txt<br></code></pre></td></tr></table></figure><hr><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">= += -= *= /= %= ^= **=</td><td align="left">赋值</td></tr><tr><td align="left">?:</td><td align="left">C条件表达式</td></tr><tr><td align="left">||</td><td align="left">逻辑或</td></tr><tr><td align="left">&amp;&amp;</td><td align="left">逻辑与</td></tr><tr><td align="left">~ 和 !~</td><td align="left">匹配正则表达式和不匹配正则表达式</td></tr><tr><td align="left">&lt; &lt;= &gt; &gt;= != ==</td><td align="left">关系运算符</td></tr><tr><td align="left">空格</td><td align="left">连接</td></tr><tr><td align="left">+ -</td><td align="left">加，减</td></tr><tr><td align="left">* / %</td><td align="left">乘，除与求余</td></tr><tr><td align="left">+ - !</td><td align="left">一元加，减和逻辑非</td></tr><tr><td align="left">^ ***</td><td align="left">求幂</td></tr><tr><td align="left">++ –</td><td align="left">增加或减少，作为前缀或后缀</td></tr><tr><td align="left">$</td><td align="left">字段引用</td></tr><tr><td align="left">in</td><td align="left">数组成员</td></tr></tbody></table><p>过滤第一列大于2的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;$1&gt;2&#x27;</span> log.txt    <span class="hljs-comment">#命令</span><br><span class="hljs-comment">#输出</span><br>3 Are you like awk<br>This<span class="hljs-string">&#x27;s a test</span><br><span class="hljs-string">10 There are orange,apple,mongo</span><br></code></pre></td></tr></table></figure><p>过滤第一列等于2的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;$1==2 &#123;print $1,$3&#125;&#x27;</span> log.txt    <span class="hljs-comment">#命令</span><br><span class="hljs-comment">#输出</span><br>2 is<br></code></pre></td></tr></table></figure><p>过滤第一列大于2并且第二列等于’Are’的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;$1&gt;2 &amp;&amp; $2==&quot;Are&quot; &#123;print $1,$2,$3&#125;&#x27;</span> log.txt    <span class="hljs-comment">#命令</span><br><span class="hljs-comment">#输出</span><br>3 Are you<br></code></pre></td></tr></table></figure><hr><h2 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h2><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$n</td><td align="left">当前记录的第n个字段，字段间由FS分隔</td></tr><tr><td align="left">$0</td><td align="left">完整的输入记录</td></tr><tr><td align="left">ARGC</td><td align="left">命令行参数的数目</td></tr><tr><td align="left">ARGIND</td><td align="left">命令行中当前文件的位置(从0开始算)</td></tr><tr><td align="left">ARGV</td><td align="left">包含命令行参数的数组</td></tr><tr><td align="left">CONVFMT</td><td align="left">数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td></tr><tr><td align="left">ERRNO</td><td align="left">最后一个系统错误的描述</td></tr><tr><td align="left">FIELDWIDTHS</td><td align="left">字段宽度列表(用空格键分隔)</td></tr><tr><td align="left">FILENAME</td><td align="left">当前文件名</td></tr><tr><td align="left">FNR</td><td align="left">各文件分别计数的行号</td></tr><tr><td align="left">FS</td><td align="left">字段分隔符(默认是任何空格)</td></tr><tr><td align="left">IGNORECASE</td><td align="left">如果为真，则进行忽略大小写的匹配</td></tr><tr><td align="left">NF</td><td align="left">一条记录的字段的数目</td></tr><tr><td align="left">NR</td><td align="left">已经读出的记录数，就是行号，从1开始</td></tr><tr><td align="left">OFMT</td><td align="left">数字的输出格式(默认值是%.6g)</td></tr><tr><td align="left">OFS</td><td align="left">输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</td></tr><tr><td align="left">ORS</td><td align="left">输出记录分隔符(默认值是一个换行符)</td></tr><tr><td align="left">RLENGTH</td><td align="left">由match函数所匹配的字符串的长度</td></tr><tr><td align="left">RS</td><td align="left">记录分隔符(默认是一个换行符)</td></tr><tr><td align="left">RSTART</td><td align="left">由match函数所匹配的字符串的第一个位置</td></tr><tr><td align="left">SUBSEP</td><td align="left">数组下标分隔符(默认值是/034)</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;BEGIN&#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;,&quot;ORS&quot;,&quot;RS&quot;;printf &quot;---------------------------------------------\n&quot;&#125; &#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS&#125;&#x27;</span>  log.txt<br>FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS<br>---------------------------------------------<br>log.txt    2    1         5    1<br>log.txt    2    2         5    2<br>log.txt    2    3         3    3<br>log.txt    2    4         4    4<br>$ awk -F\<span class="hljs-string">&#x27; &#x27;</span>BEGIN&#123;<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;</span>,<span class="hljs-string">&quot;FILENAME&quot;</span>,<span class="hljs-string">&quot;ARGC&quot;</span>,<span class="hljs-string">&quot;FNR&quot;</span>,<span class="hljs-string">&quot;FS&quot;</span>,<span class="hljs-string">&quot;NF&quot;</span>,<span class="hljs-string">&quot;NR&quot;</span>,<span class="hljs-string">&quot;OFS&quot;</span>,<span class="hljs-string">&quot;ORS&quot;</span>,<span class="hljs-string">&quot;RS&quot;</span>;<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;---------------------------------------------\n&quot;</span>&#125; &#123;<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;</span>,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS&#125;<span class="hljs-string">&#x27;  log.txt</span><br><span class="hljs-string">FILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS</span><br><span class="hljs-string">---------------------------------------------</span><br><span class="hljs-string">log.txt    2    1    &#x27;</span>    1    1<br>log.txt    2    2    <span class="hljs-string">&#x27;    1    2</span><br><span class="hljs-string">log.txt    2    3    &#x27;</span>    2    3<br>log.txt    2    4    <span class="hljs-string">&#x27;    1    4</span><br><span class="hljs-string"># 输出顺序号 NR, 匹配文本行号</span><br><span class="hljs-string">$ awk &#x27;</span>&#123;<span class="hljs-built_in">print</span> NR,FNR,<span class="hljs-variable">$1</span>,<span class="hljs-variable">$2</span>,<span class="hljs-variable">$3</span>&#125;<span class="hljs-string">&#x27; log.txt</span><br><span class="hljs-string">---------------------------------------------</span><br><span class="hljs-string">1 1 2 this is</span><br><span class="hljs-string">2 2 3 Are you</span><br><span class="hljs-string">3 3 This&#x27;</span>s a <span class="hljs-built_in">test</span><br>4 4 10 There are<br><span class="hljs-comment"># 指定输出分割符</span><br>$  awk <span class="hljs-string">&#x27;&#123;print $1,$2,$5&#125;&#x27;</span> OFS=<span class="hljs-string">&quot; $ &quot;</span>  log.txt<br>---------------------------------------------<br>2 $ this $ <span class="hljs-built_in">test</span><br>3 $ Are $ awk<br>This<span class="hljs-string">&#x27;s $ a $</span><br><span class="hljs-string">10 $ There $</span><br></code></pre></td></tr></table></figure><hr><h2 id="使用正则，字符串匹配"><a href="#使用正则，字符串匹配" class="headerlink" title="使用正则，字符串匹配"></a>使用正则，字符串匹配</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输出第二列包含 &quot;th&quot;，并打印第二列与第四列</span><br>$ awk <span class="hljs-string">&#x27;$2 ~ /th/ &#123;print $2,$4&#125;&#x27;</span> log.txt<br>---------------------------------------------<br>this a<br></code></pre></td></tr></table></figure><p><strong>~ 表示模式开始。// 中是模式。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 输出包含 &quot;re&quot; 的行</span><br>$ awk <span class="hljs-string">&#x27;/re/ &#x27;</span> log.txt<br>---------------------------------------------<br>3 Are you like awk<br>10 There are orange,apple,mongo<br></code></pre></td></tr></table></figure><hr><h2 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;BEGIN&#123;IGNORECASE=1&#125; /this/&#x27;</span> log.txt<br>---------------------------------------------<br>2 this is a <span class="hljs-built_in">test</span><br>This<span class="hljs-string">&#x27;s a test</span><br></code></pre></td></tr></table></figure><hr><h2 id="模式取反"><a href="#模式取反" class="headerlink" title="模式取反"></a>模式取反</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk <span class="hljs-string">&#x27;$2 !~ /th/ &#123;print $2,$4&#125;&#x27;</span> log.txt<br>---------------------------------------------<br>Are like<br>a<br>There orange,apple,mongo<br>$ awk <span class="hljs-string">&#x27;!/th/ &#123;print $2,$4&#125;&#x27;</span> log.txt<br>---------------------------------------------<br>Are like<br>a<br>There orange,apple,mongo<br></code></pre></td></tr></table></figure><hr><h2 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h2><p>关于 awk 脚本，我们需要注意两个关键词 BEGIN 和 END。</p><ul><li>BEGIN{ 这里面放的是执行前的语句 }</li><li>END {这里面放的是处理完所有的行后要执行的语句 }</li><li>{这里面放的是处理每一行时要执行的语句}</li></ul><p>假设有这么一个文件（学生成绩表）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat score.txt<br>Marry   2143 78 84 77<br>Jack    2321 66 78 45<br>Tom     2122 48 77 71<br>Mike    2537 87 97 95<br>Bob     2415 40 57 62<br></code></pre></td></tr></table></figure><p>我们的 awk 脚本如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ cat cal.awk<br><span class="hljs-meta">#!/bin/awk -f</span><br><span class="hljs-comment">#运行前</span><br>BEGIN &#123;<br>    math = 0<br>    english = 0<br>    computer = 0<br> <br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n&quot;</span><br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;---------------------------------------------\n&quot;</span><br>&#125;<br><span class="hljs-comment">#运行中</span><br>&#123;<br>    math+=<span class="hljs-variable">$3</span><br>    english+=<span class="hljs-variable">$4</span><br>    computer+=<span class="hljs-variable">$5</span><br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;%-6s %-6s %4d %8d %8d %8d\n&quot;</span>, <span class="hljs-variable">$1</span>, <span class="hljs-variable">$2</span>, <span class="hljs-variable">$3</span>,<span class="hljs-variable">$4</span>,<span class="hljs-variable">$5</span>, <span class="hljs-variable">$3</span>+<span class="hljs-variable">$4</span>+<span class="hljs-variable">$5</span><br>&#125;<br><span class="hljs-comment">#运行后</span><br>END &#123;<br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;---------------------------------------------\n&quot;</span><br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;  TOTAL:%10d %8d %8d \n&quot;</span>, math, english, computer<br>    <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;AVERAGE:%10.2f %8.2f %8.2f\n&quot;</span>, math/NR, english/NR, computer/NR<br>&#125;<br></code></pre></td></tr></table></figure><p>我们来看一下执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk -f cal.awk score.txt<br>NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL<br>---------------------------------------------<br>Marry  2143     78       84       77      239<br>Jack   2321     66       78       45      189<br>Tom    2122     48       77       71      196<br>Mike   2537     87       97       95      279<br>Bob    2415     40       57       62      159<br>---------------------------------------------<br>  TOTAL:       319      393      350<br>AVERAGE:     63.80    78.60    70.00<br></code></pre></td></tr></table></figure><hr><h2 id="另外一些实例"><a href="#另外一些实例" class="headerlink" title="另外一些实例"></a>另外一些实例</h2><p>AWK 的 hello world 程序为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">BEGIN &#123; <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Hello, world!&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>计算文件大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ls -l *.txt | awk <span class="hljs-string">&#x27;&#123;sum+=$5&#125; END &#123;print sum&#125;&#x27;</span><br>--------------------------------------------------<br>666581<br></code></pre></td></tr></table></figure><p>从文件中找出长度大于 80 的行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">awk <span class="hljs-string">&#x27;length&gt;80&#x27;</span> log.txt<br></code></pre></td></tr></table></figure><p>打印九九乘法表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">seq 9 | sed <span class="hljs-string">&#x27;H;g&#x27;</span> | awk -v RS=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-string">&#x27;&#123;for(i=1;i&lt;=NF;i++)printf(&quot;%dx%d=%d%s&quot;, i, NR, i*NR, i==NR?&quot;\n&quot;:&quot;\t&quot;)&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-command-manual.html"><img src="https://www.runoob.com/images/up.gif" alt="Linux 命令大全"> Linux 命令大全</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查看linux中某个端口（port）是否被占用</title>
    <link href="/2020/12/23/linux-003/"/>
    <url>/2020/12/23/linux-003/</url>
    
    <content type="html"><![CDATA[<ol><li><p>使用<code>lsof</code></p><p><code>lsof -i:端口号</code>可以查看某个端口号是否被占用</p></li><li><p>使用<code>netstat</code></p><p><code>netstat -anp | grep 80</code>可以看某个端口被哪个应用占用，比如80端口</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx反代——frp与网站端口共用</title>
    <link href="/2020/12/22/linux-002/"/>
    <url>/2020/12/22/linux-002/</url>
    
    <content type="html"><![CDATA[<p>一直以来我对VPS有三个应用需求：</p><ol><li>frp内网穿透</li><li>v2ray大墙穿透</li><li>网站</li></ol><p>这三个应用一起用的会有一个问题，80和443端口占用的问题。</p><p>网站必须得有80或443吧，不然就得带端口号。frp如果没有80或443，那么穿透后就也必须在网址后面加端口号才能访问。而v2ray要想更隐蔽，使用ws+tls就没办法了。</p><p>通过一番学习，下面就是使用Nginx解决端口共用问题的方法。</p><p>nginx可以提供反代功能，简单说就是根据来访的不同网址，把流量导向不同的内部端口或者路径。</p><p>下面试着用markdown的流程图解释一下</p><pre class="mermaid">graph LR    id[数据来访]-->sub1(a.b.com)-->id2{80,443}-->id1-->op1((web-path))-->id4(www)    id[数据来访]-->sub2(b.b.com)-->id2-->id1-->op2((:6666 7777))-->id5(Frp)    id[数据来访]-->sub3(c.b.com)-->id2-->id1-->op3((v2ray path))-->id6(v2ray)    id1{Nginx}</pre><p>Hexo的mermaid支持有问题吧，渲染不对，截张typora里的图：</p><p><img src="https://img.pluoluo.top/hexo/210120_mermaid.jpg"></p><p>可以分应用分别写，也可以写在一个文件里，我是分开放的。下面是nginx的conf文件：</p><ol><li>v2ray的</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;<br>        <span class="hljs-attribute">ssl_certificate</span>       /data/c.b.com.crt;            <span class="hljs-comment">#证书位置</span><br>        <span class="hljs-attribute">ssl_certificate_key</span>   /data/c.b.com.key;<span class="hljs-comment">#私钥位置</span><br>        <span class="hljs-attribute">ssl_protocols</span>         TLSv1.<span class="hljs-number">3</span>;<br>        <span class="hljs-attribute">ssl_ciphers</span>           TLS13-AES-<span class="hljs-number">256</span>-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-<span class="hljs-number">128</span>-GCM-SHA256:TLS13-AES-<span class="hljs-number">128</span>-CCM-<span class="hljs-number">8</span>-SHA256:TLS13-AES-<span class="hljs-number">128</span>-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;<br><span class="hljs-attribute">server_name</span> c.b.com;<span class="hljs-comment">#域名</span><br>        <span class="hljs-attribute">index</span> index.html index.htm;<br>        <span class="hljs-attribute">root</span>  /home/wwwroot/ccc;<span class="hljs-comment">#v2ray设置的路径</span><br>        <span class="hljs-attribute">error_page</span> <span class="hljs-number">400</span> = /<span class="hljs-number">400</span>.html;<br><span class="hljs-attribute">location</span> /e40f62b8/<br>        &#123;<br>        <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>    <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:37492;               <span class="hljs-comment">#v2ray的监听端口</span><br>        <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP $remote_addr;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;<br>        <span class="hljs-attribute">proxy_set_header</span> Upgrade $http_upgrade;<br>        <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&quot;upgrade&quot;</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> Host $http_host;<br>        &#125;<br>&#125;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> c.b.com;<br><span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://c.b.com$request_uri;<span class="hljs-comment">#80端访问则跳转</span><br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>frp的</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs nginx">  <span class="hljs-attribute">underscores_in_headers</span> <span class="hljs-literal">on</span>;<br>server<br>    &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;<br>        <span class="hljs-attribute">server_name</span> b.b.com f.b.com;    <span class="hljs-comment"># 这里设置子域名，以空格分开</span><br>        <span class="hljs-attribute">charset</span> utf-<span class="hljs-number">8</span>;<br><br>    <span class="hljs-attribute">ssl_certificate</span> /home/wwwroot/b.b.com/fullchain.cer;       <span class="hljs-comment">#证书位置,如果是多个域名，证书应该是泛域名的</span><br>    <span class="hljs-attribute">ssl_certificate_key</span> /home/wwwroot/b.b.com/key.key;<span class="hljs-comment">#私钥位置,如果是多个域名，证书应该是泛域名的</span><br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">10m</span>;<br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">10m</span>;<br><br><span class="hljs-attribute">location</span> / &#123;<br><span class="hljs-attribute">resolver</span> <span class="hljs-number">8.8.8.8</span>;<br><span class="hljs-attribute">proxy_ssl_server_name</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP $remote_addr;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto $scheme;<br>        <span class="hljs-attribute">proxy_set_header</span> Host $host;<br>        <span class="hljs-attribute">proxy_pass</span> https://$host:7777; <span class="hljs-comment">#端口号（7777）替换为你frps的https监听端口</span><br>&#125;<br>       <span class="hljs-comment">#access_log  /.log; #若去除行首的注释符，则需要修改成你想要存放日志的位置</span><br>    &#125;<br><br> server&#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span> b.b.com d.b.com e.b.com; <span class="hljs-comment"># 这里设置子域名，以空格分开</span><br>        <span class="hljs-attribute">location</span> / &#123;<br>            <span class="hljs-comment">#underscores_in_headers on;</span><br>            <span class="hljs-attribute">proxy_set_header</span> Host $host;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Real-IP $remote_addr;<br>            <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;<br>            <span class="hljs-attribute">proxy_pass</span> http://localhost:6666;  <span class="hljs-comment"># 这里是vhost_http_port </span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><ol start="3"><li>web网站的就不贴了，各种网站的nginx参数不一样，监听方式跟上面v2ray一样，只是需要改root</li></ol>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>nginx</tag>
      
      <tag>frp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 16.04 Xenial：如何重置密码（忘记密码）</title>
    <link href="/2020/12/22/Linux-001/"/>
    <url>/2020/12/22/Linux-001/</url>
    
    <content type="html"><![CDATA[<p>最近一直没用VM，然后突然要用到的时候忘记密码了。root和各个user都忘记了。无奈，找了些方法都有点老。到root那一步还是要admin的权限密码。最后终于搞定顺利登入系统，把方法分享给大家：</p><h4 id="环境背景"><a href="#环境背景" class="headerlink" title="环境背景"></a>环境背景</h4><p>虚拟机：VirtualBox VM<br> 系统：Ubuntu 16.04 Xenial</p><h4 id="重启进入Grub-Menu界面"><a href="#重启进入Grub-Menu界面" class="headerlink" title="重启进入Grub Menu界面"></a>重启进入Grub Menu界面</h4><p>首先，我们需要重新Ubuntu 16.04，当出现VB的标志时，按<code>shift</code>（长时间按住），直到进入Grub页面。</p><p><img src="https://upload-images.jianshu.io/upload_images/3972299-5c53354f6bb20123.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/639/format/webp" alt="img"></p><h4 id="编辑修改Grub"><a href="#编辑修改Grub" class="headerlink" title="编辑修改Grub"></a>编辑修改Grub</h4><p>当我们进入Grub页面后，用上下键选择到我们需要使用的ubuntu项目。然后按<code>e</code>，进入编译界面。</p><p><img src="https://upload-images.jianshu.io/upload_images/3972299-948325eed4052bbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/639/format/webp" alt="img"></p><h4 id="修改boot信息"><a href="#修改boot信息" class="headerlink" title="修改boot信息"></a>修改boot信息</h4><p>当我们进入编辑界面后，选择到<code>Linux</code>的启动配置项目。然后将read-only(<code>ro</code>)改为read&amp;write(<code>rw</code>)，同时将初始化设置为命令行(<code>init=/bin/bash</code>)。<br> 原始：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">linux     /boot/vmlinuz-4-4.0-22-generic root=UUID=43ad24d3-e\<br>c5b-44ee-a099-a88eb9520989 ro  quiet splash <span class="hljs-variable">$vt_handoff</span><br></code></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">linux     /boot/vmlinuz-4-4.0-22-generic root=UUID=43ad24d3-e\<br>c5b-44ee-a099-a88eb9520989 rw init=/bin/bash<br></code></pre></td></tr></table></figure><p>修改完成后，使用F10或者CTRL+x重启系统。</p><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h4><p>之前都搞定后，我们就能够看到以root用户登录的命令行界面了。这时候我们需要确保该root用户已经被挂载为可读可写的权限：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">root@(none)<span class="hljs-symbol">:/</span><span class="hljs-comment"># mount | grep -w /</span><br></code></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/3972299-d5810a42baee259d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/639/format/webp" alt="img"></p><p>image.png</p><p>如果权限正确，那么就可以使用<code>passwd [username]</code>命令来修改密码了。<br> 搞定！重启之后就看到了登录界面，然后用新密码登录即可。注意这里重启的指令为：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-symbol">root@</span>(none):/# exec /sbin/<span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><h4 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h4><ul><li>如果在修改密码的时候遇到权限不正确：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Enter <span class="hljs-keyword">new</span> UNIX password:<br>Retype <span class="hljs-keyword">new</span> UNIX password:<br>passwd: Authentication token manipulation error<br>passwd: password unchanged<br></code></pre></td></tr></table></figure><p>这说明我们的root只有可读权限，使用该命令将其设为可读可写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mount -o remount,rw /</span><br></code></pre></td></tr></table></figure><ul><li><code>[ end Kernel panic - not syncing: Attempted to kill init! exit code=0x0007f00</code><br> 确保在修改Grub信息的时候，移除掉了<code>splash</code>的这个启动项。</li><li>在使用<code>reboot</code>命令进行reboot的时候，出现一些错误<br> 使用如下命令进行重启。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># exec /sbin/init</span><br></code></pre></td></tr></table></figure><blockquote><p>作者：kamiSDY<br>链接：<a href="https://www.jianshu.com/p/c17f29a404e8">https://www.jianshu.com/p/c17f29a404e8</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 添加开机启动项的三种方法</title>
    <link href="/2020/12/22/Linux-rc/"/>
    <url>/2020/12/22/Linux-rc/</url>
    
    <content type="html"><![CDATA[<p>linux 添加开机启动项的三种方法。</p><ol><li><p>编辑文件 /etc/rc.local 输入命令：vim /etc/rc.local 将出现类似如下的文本片段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># This script will be executed *after* all the other init scripts.</span><br><span class="hljs-comment"># You can put your own initialization stuff in here if you don&#x27;t</span><br><span class="hljs-comment"># want to do the full Sys V style init stuff.</span><br><br>touch /var/lock/subsys/<span class="hljs-built_in">local</span><br>/etc/init.d/mysqld start <span class="hljs-comment">#mysql开机启动</span><br>/etc/init.d/nginx start <span class="hljs-comment">#nginx开机启动</span><br>/etc/init.d/php-fpm start <span class="hljs-comment">#php-fpm开机启动</span><br>/etc/init.d/memcached start <span class="hljs-comment">#memcache开机启动</span><br><br><span class="hljs-comment">#在文件末尾（exit 0之前）加上你开机需要启动的程序或执行的命令即可（执行的程序需要写绝对路径，添加到系统环境变量的除外），如：</span><br><br>/usr/<span class="hljs-built_in">local</span>/thttpd/sbin/thttpd  -C /usr/<span class="hljs-built_in">local</span>/thttpd/etc/thttpd.conf<br></code></pre></td></tr></table></figure></li><li><p>自己写一个shell脚本 将写好的脚本（.sh文件）放到目录 /etc/profile.d/ 下，系统启动后就会自动执行该目录下的所有shell脚本。</p></li><li><p>通过chkconfig命令设置</p><p>将启动文件cp到 /etc/init.d/或者/etc/rc.d/init.d/（前者是后者的软连接）下</p><p>vim 启动文件，文件前面务必添加如下三行代码，否侧会提示chkconfig不支持</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh 告诉系统使用的shell,所以的shell脚本都是这样</span><br><span class="hljs-comment">#chkconfig: 35 20 80 分别代表运行级别，启动优先权，关闭优先权，此行代码必须</span><br><span class="hljs-comment">#description: http server（自己随便发挥）//两行都注释掉！！！，此行代码必须</span><br><br>chkconfig --add 脚本文件名 操作后就已经添加了<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>转载自：<a href="https://ifunbox.top/linux-autostart-method/">https://ifunbox.top/linux-autostart-method/</a> </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网件4300-TFTP刷机</title>
    <link href="/2020/12/18/%E7%BD%91%E4%BB%B64300-TFTP%E5%88%B7%E6%9C%BA/"/>
    <url>/2020/12/18/%E7%BD%91%E4%BB%B64300-TFTP%E5%88%B7%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>网件4300已经很老了，当主路由，只提供宽带接入、DCHP和WIFI已经够用了，也就一直没换它，也很久没刷过机了，把之前的硬刷教程放这以备后用吧。</p><a id="more"></a><h3 id="网件原版固件转刷openwrt系统"><a href="#网件原版固件转刷openwrt系统" class="headerlink" title="网件原版固件转刷openwrt系统"></a>网件原版固件转刷openwrt系统</h3><p>也是我折腾的开始</p><p>首先你的路由器是网件原版固件，此方法就是，从网件原版固件刷到OP固件。当然也可以从OP刷回网件原版固件。注意：op的固件后缀必须是XXXfactory.img的。。</p><ol><li><p>首先，电脑打开cmd 输入ping 192.168.1.1 -t</p></li><li><p>电脑改为固定IP（192.168.1.2/255.255.255.0）</p></li><li><p>把电脑拉出来的线接到路由lan1，（路由器的剩下的lan口的网线最好都拔掉）</p></li><li><p>断电，就是按掉路由器的那个电源开关</p></li><li><p>用尖针按住路由后面的复位键，千万不要松手</p></li><li><p>通电。等待电源灯 从 黄灯→变为绿灯，并且绿灯一直在闪烁。然后松开复位键。</p></li><li><p>打开tftp软件，输入192.168.1.1，然后选择自己的固件。注意：密码那项为空。不要填。</p></li><li><p>点击上传，软件上出现successful字就成功了。</p></li><li><p>等待3到5分钟。</p></li><li><p>注意看cmd中界面192.168.1.1-t 是否一直能ping通。 持续10秒以上</p></li><li><p>最后一步很重要，断电（不然的话会没有5G信号，某位大神说的）。步骤如下：</p><p>​    直接拔掉电源插座，等待5秒左右。（先拔掉电源插座，然后关掉路由器上的开关）</p></li><li><p>插上电源插座，等待5秒左右。打开路由器上的开关。</p></li></ol><p>刷机完毕了。把猫的线插到wan口。</p><p>web网页在进入192.168.1.1，默认账号密码参照固件说明。</p><h3 id="刷回官方固件"><a href="#刷回官方固件" class="headerlink" title="刷回官方固件"></a>刷回官方固件</h3><p>网件4300刷 128M flash可用固件 刷回官方固件方法：</p><p> 刷入dd wrt，然后用telnet打下面的命令</p><ol><li><p>mkfs.jffs2 -o /dev/mtdblock/3 -n -b -e 0x20000 </p></li><li><p>mount -t jffs2 /dev/mtdblock/3 /jffs </p></li></ol><p>再刷回原厂应该就好了，开机速度正常。openwrt官网的固件好像也没问题，出问题的是那些可以用128M flash的固件。</p>]]></content>
    
    
    
    <tags>
      
      <tag>openwrt</tag>
      
      <tag>路由器</tag>
      
      <tag>刷机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Openwrt 修改Web页面默认访问端口</title>
    <link href="/2020/12/18/Openwrt%20%E4%BF%AE%E6%94%B9Web%E9%A1%B5%E9%9D%A2%E9%BB%98%E8%AE%A4%E8%AE%BF%E9%97%AE%E7%AB%AF%E5%8F%A3/"/>
    <url>/2020/12/18/Openwrt%20%E4%BF%AE%E6%94%B9Web%E9%A1%B5%E9%9D%A2%E9%BB%98%E8%AE%A4%E8%AE%BF%E9%97%AE%E7%AB%AF%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p>有时候我们需要外网访问路由器，但是又没有80和443端口，就需要把openwrt的web页面的端口改成其它的。</p><a id="more"></a><p><strong>openwrt如何简单隐藏Web页面</strong></p><ul><li>路由器刷入openwrt并且启用了Web页面（一般是Luci），将路由任一LAN口与电脑连接（IP自动获取），一般只需要浏览器输入LAN口的IP地址后就可以访问路由器的Web页面，如浏览器打开后直接输入：192.168.1.1</li><li>浏览器http默认为80端口，故实际访问为：<a href="http://10.30.3.1:8080/">http://192.168.1.1:80/</a></li><li>如果修改了openwrt默认的http监听端口号80，那么就不能直接输入：192.168.1.1来访问Web页面，如将默认监听端口修改为8080，则需要输入IP的同时制定端口号才能正确访问openwrt的Web页面，如：<a href="http://10.30.3.1:8080/">http://192.168.1.1:8080/</a>；</li><li>这样修改了默认监听端口号后，就可以一定程度的隐藏web端，不让普通用户访问（当然还可设置web访问密码）；需要修改配置的时候管理员依然可以使用Web页面去配置路由。</li></ul><p>80端口是为<a href="https://baike.baidu.com/item/HTTP">HTTP</a>（HyperText Transport Protocol)即<a href="https://baike.baidu.com/item/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/8535513">超文本传输协议</a>开放的，此为上网冲浪使用次数最多的协议，主要用于WWW（World Wide Web）即万维网传输信息的协议。</p><p>可以通过HTTP地址（即常说的“网址”）加“: 80”来访问网站，因为浏览网页服务默认的<a href="https://baike.baidu.com/item/%E7%AB%AF%E5%8F%A3%E5%8F%B7/10883658">端口号</a>都是80，因此只需输入网址即可，不用输入“: 80”了。</p><p><strong>Openwrt 修改Web页面默认访问端口大致步骤如下：</strong></p><ol><li>使用 串口或者SSH登录openwrt后台；</li><li>openwrt 中默认使用的web服务器是uhttpd，</li><li>进入配置文件路径：cd /etc/config/</li><li> 使用vim编辑器修改uhttpd文件 vi uhttpd </li></ol><p>SSH进入openwrt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /etc/config/<br>vi uhttpd<br></code></pre></td></tr></table></figure><p>vim编辑器打开uhttpd 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Server configuration</span><br>config uhttpd main<br><br>       <span class="hljs-comment"># HTTP listen addresses, multiple allowed</span><br>       list listen_http        0.0.0.0:8080<br>       list listen_http        [::]:80<br><br>       <span class="hljs-comment"># HTTPS listen addresses, multiple allowed</span><br>       list listen_https       0.0.0.0:443<br>       list listen_https       [::]:443<br><br>       <span class="hljs-comment"># Redirect HTTP requests to HTTPS if possible</span><br>       option redirect_https   1<br><br>       <span class="hljs-comment"># Server document root</span><br>       option home             /www<br><br>       <span class="hljs-comment"># Reject requests from RFC1918 IP addresses</span><br>       <span class="hljs-comment"># directed to the servers public IP(s).</span><br>       <span class="hljs-comment"># This is a DNS rebinding countermeasure.</span><br>       option rfc1918_filter 1<br><br>       <span class="hljs-comment"># Maximum number of concurrent requests.</span><br>       <span class="hljs-comment"># If this number is exceeded, further requests are</span><br>       <span class="hljs-comment"># queued until the number of running requests drops</span><br>       <span class="hljs-comment"># below the limit again.</span><br>       option max_requests 3<br><br>       <span class="hljs-comment"># Maximum number of concurrent connections.</span><br>       <span class="hljs-comment"># If this number is exceeded, further TCP connection</span><br>       <span class="hljs-comment"># attempts are queued until the number of active</span><br>       <span class="hljs-comment"># connections drops below the limit again.</span><br>       option max_connections 100<br><br>       <span class="hljs-comment"># Certificate and private key for HTTPS.</span><br>       <span class="hljs-comment"># If no listen_https addresses are given,</span><br>       <span class="hljs-comment"># the key options are ignored.</span><br>       option cert             /etc/uhttpd.crt<br>       option key              /etc/uhttpd.key<br><br>       <span class="hljs-comment"># CGI url prefix, will be searched in docroot.</span><br>       <span class="hljs-comment"># Default is /cgi-bin</span><br>       option cgi_prefix       /cgi-bin<br><br>       <span class="hljs-comment"># List of extension-&gt;interpreter mappings.</span><br>       <span class="hljs-comment"># Files with an associated interpreter can</span><br>       <span class="hljs-comment"># be called outside of the CGI prefix and do</span><br>       <span class="hljs-comment"># not need to be executable.</span><br><br></code></pre></td></tr></table></figure><ul><li><p><strong>修改完成后保存(:wq)</strong></p></li><li><p><strong>重启uhttpd（或重启路由器）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@OpenWrt:/<span class="hljs-comment"># etc/init.d/uhttpd     restart（# reboot）</span><br></code></pre></td></tr></table></figure></li><li><p><strong>使用新的端口登录web端，如：</strong><a href="http://10.30.3.1:8080/">http://192.168.1.1:8080/</a></p></li><li><p><strong>另外，openwrt的官网有说明，默认情况下uHTTPd绑定的端口也包含WAN口，如果要指定只包含LAN口的话可以按照下图步骤设置。</strong></p><p> <em>By default, uHTTPd is bind to 0.0.0.0 which also includes the WAN port of your router. To bind uHTTPd to the LAN port only you have to change the listen_http and listen_https options to your LAN IP address.</em></p><p><em>To get your current LAN IP address run this command:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">uci get network.lan.ipaddr                   <span class="hljs-comment">#获取内网地址</span><br>192.168.1.1<br></code></pre></td></tr></table></figure><p>再把网才的uhttpd改成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">config uhttpd main<br>       <span class="hljs-comment"># HTTP listen addresses, multiple allowed</span><br>       list listen_http        192.168.1.1:80<br><span class="hljs-comment">#      list listen_http        [::]:80</span><br> <br>       list listen_https       192.168.1.1:443<br><span class="hljs-comment">#      list listen_https       [::]:443</span><br>  <br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>软路由</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软路由</tag>
      
      <tag>openwrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo小技巧</title>
    <link href="/2020/12/17/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2020/12/17/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<p>把一些小技巧集中在这里，方便查找</p><a id="more"></a><h3 id="站内链接写法"><a href="#站内链接写法" class="headerlink" title="站内链接写法"></a>站内链接写法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% post_link 文章文件名 链接名称 %&#125;<br></code></pre></td></tr></table></figure><p>例如这个</p><a href="/2020/12/10/Test-blog/" title="Hexo博客">Hexo博客</a><p>注意中间不是<code>title</code>，是文件名</p><hr><h3 id="hexo开启评论系统"><a href="#hexo开启评论系统" class="headerlink" title="hexo开启评论系统"></a>hexo开启评论系统</h3><a href="/2020/12/17/hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/" title="链接在这">链接在这</a><hr><h3 id="如何折叠文本"><a href="#如何折叠文本" class="headerlink" title="如何折叠文本"></a>如何折叠文本</h3><p>折叠文本，使用<code>&lt;details&gt;</code>标签，标题用<code>&lt;summary&gt;</code>标签。</p><details>  <summary>可以写一个标题</summary>隐藏块中的代码块没有样式，这是这个隐藏方案的缺点，还有就是鼠标样式会变。  <br>支持 `markdown` 语法<ul><li><p>支持 <strong>粗体</strong>、<em>斜体</em></p></li><li><p>支持列表</p></li><li><p>支持md插入图片语法：<img src="/img/pluo-152x152.png" alt="1"></p></li><li><p>支持html插入图片语法：<img src="/img/pluo-152x152.png" width="50%"></p></li><li><p>支持行内代码 <code>markdown</code></p></li><li><p>支持代码块</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;initializer_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span> &#123;</span><br>    A() &#123; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;1&quot;</span>; &#125;<br>    A(<span class="hljs-keyword">int</span>) &#123; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;2&quot;</span>; &#125;<br>    A(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">initializer_list</span>&lt;<span class="hljs-keyword">int</span>&gt;) &#123; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;3&quot;</span>; &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    A a1;<br>    A a2&#123;&#125;;<br>    A a3&#123; <span class="hljs-number">1</span> &#125;;<br>    A a4&#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span> &#125;;<br>&#125;<br>​```<span class="hljs-comment">// 此处加点文字，防止排版错误：因为这是代码块内的代码。使用时可删除</span><br></code></pre></td></tr></table></figure></li><li><p>支持表格</p><table><thead><tr><th>文字</th><th>文字</th></tr></thead><tbody><tr><td>文字</td><td>文字</td></tr></tbody></table></li></ul></details><p>文本继续</p><hr><h3 id="流程图支持"><a href="#流程图支持" class="headerlink" title="流程图支持"></a>流程图支持</h3><p>要用的时候发现Hexo 默认是不支持流程图的 Markdown 语法的，可以安装支持：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-filter-flowchart<br></code></pre></td></tr></table></figure><details><summary>后面的设置</summary>改_config.yml<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mermaid:</span> <span class="hljs-comment">## mermaid url https://github.com/knsv/mermaid</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># default true</span><br>  <span class="hljs-attr">version:</span> <span class="hljs-string">&quot;7.1.2&quot;</span> <span class="hljs-comment"># default v7.1.2</span><br>  <span class="hljs-attr">options:</span>  <span class="hljs-comment"># find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span><br>    <span class="hljs-comment">#startOnload: true  // default true</span><br></code></pre></td></tr></table></figure><p>改主题配置文件，我用fluid主题是支持mermaid的，打开_config.fluid.yml，开启即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 流程图，基于 mermaid-js</span><br> <span class="hljs-comment"># Flow chart, based on mermaid-js</span><br> <span class="hljs-attr">mermaid:</span><br>   <span class="hljs-comment"># 开启后文章默认可用，自定义页面如需使用，需在 Front-matter 中指定 `mermaid: true`</span><br>   <span class="hljs-comment"># If you want to use mermaid on the custom page, you need to set `mermaid: true` in Front-matter</span><br>   <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>   <span class="hljs-comment"># 开启后，只有在文章 Front-matter 里指定 `mermaid: true` 才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度</span><br>   <span class="hljs-comment"># If true, only set `mermaid: true` in Front-matter will enable mermaid, to load faster when the page does not contain mermaid</span><br>   <span class="hljs-attr">specific:</span> <span class="hljs-literal">true</span><br><br>   <span class="hljs-comment"># See: http://mermaid-js.github.io/mermaid/</span><br>   <span class="hljs-attr">options:</span> &#123; <span class="hljs-attr">theme:</span> <span class="hljs-string">&#x27;default&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>理论上应该可以了，但是渲染出错，于是试着修改js，主题目录\layout_partial\plugins\mermaid.ejs文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;%<br><span class="hljs-keyword">var</span> enable = theme.post.mermaid.enable;<br><br><span class="hljs-keyword">if</span> (enable) &#123;<br>  <span class="hljs-keyword">if</span> (is_post()) &#123;<br>    enable = !theme.post.mermaid.specific || (theme.post.mermaid.specific &amp;&amp; page.mermaid);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (is_page()) &#123;<br>    enable = page.mermaid;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    enable = <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> options = <span class="hljs-built_in">JSON</span>.stringify(theme.post.mermaid.options);<br>%&gt;<br><br>&lt;% <span class="hljs-keyword">if</span> (enable) &#123; %&gt;<br>  &lt;%- js_ex(theme.static_prefix.mermaid, <span class="hljs-string">&#x27;mermaid.min.js&#x27;</span>) %&gt;<br>  &lt;script&gt;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.mermaid) &#123;<br>      mermaid.initialize(&lt;%- options %&gt;);<br>    &#125;<br>  &lt;/script&gt;<br>&lt;% &#125; %&gt;<br><br></code></pre></td></tr></table></figure><p>把最后一段改成下面这段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;% <span class="hljs-keyword">if</span> (enable) &#123; %&gt;<br>  &lt;script src=<span class="hljs-string">&#x27;https://unpkg.com/mermaid@7.1.2/dist/mermaid.min.js&#x27;</span>&gt;&lt;/script&gt;<br>  &lt;script&gt;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.mermaid) &#123;<br>      mermaid.initialize(&#123;<span class="hljs-attr">theme</span>: <span class="hljs-string">&#x27;forest&#x27;</span>&#125;);<br>    &#125;<br>  &lt;/script&gt;<br>&lt;% &#125; %&gt;<br></code></pre></td></tr></table></figure><p>因为我开启了specific，所以要用流程图的时候，需要<code>Front-matter</code> 里指定 <code>mermaid: true</code></p></details><p>结果不太好，暂时放弃，如果以后有时候再弄这个。现在的效果可以参考<a href="/2020/12/22/linux-002/" title="这篇文章">这篇文章</a></p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>hexo</tag>
      
      <tag>建站</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开启hexo评论系统</title>
    <link href="/2020/12/17/hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/12/17/hexo%E5%BC%80%E5%90%AF%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>现在用的主题fluit，自带有Valine评论系统，用的话需要去注册一个账号。</p><a id="more"></a><h4 id="注册Leancloud，获取-AppID-和-AppKey"><a href="#注册Leancloud，获取-AppID-和-AppKey" class="headerlink" title="注册Leancloud，获取 AppID 和 AppKey"></a>注册Leancloud，获取 AppID 和 AppKey</h4><p>先去 <a href="https://leancloud.app/">Leancloud官网</a>创建一个账号，再实名验证，现在实名验证也方便。</p><p>然后就可以创建应用了。</p><p><img src="https://upload-images.jianshu.io/upload_images/17704372-79093a94b8d92b82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/601/format/webp"></p><p>创建完成后，打开应用，点击左边的存储，查看是否有<code>Comment</code>和 <code>Counter</code>，如没有则创建，权限设为所有用户。创建完成后，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/17704372-0cf9a82b7ab02ad0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/946/format/webp"></p><p>点击设置 → 安全中心 ,将除了数据存储的服务全部关闭，并绑定web安全域名，防止恶意调用。安全域名就填博客的地址。</p><p><img src="https://upload-images.jianshu.io/upload_images/17704372-e8399847d4ec850c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1133/format/webp"></p><p>最后点击 应用 Keys，获取到 <code>AppID</code> 和 <code>Appkey</code>。</p><h4 id="在主题中启用valine"><a href="#在主题中启用valine" class="headerlink" title="在主题中启用valine"></a>在主题中启用valine</h4><p>打开主题配置文件，搜索到comments，修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">comments:</span><br>   <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>   <span class="hljs-comment"># 指定的插件，需要同时设置对应插件的必要参数</span><br>   <span class="hljs-comment"># The specified plugin needs to set the necessary parameters at the same time</span><br>   <span class="hljs-comment"># Options: utterances | disqus | gitalk | valine | waline | changyan | livere | remark42 | twikoo</span><br>   <span class="hljs-attr">type:</span> <span class="hljs-string">valine</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">appid:</span> <span class="hljs-string">刚才获取的appid</span><br>  <span class="hljs-attr">appkey:</span> <span class="hljs-string">刚才获取的appkey</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">来，说点什么</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">window.location.pathname</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">retro</span><br>  <span class="hljs-attr">meta:</span> [<span class="hljs-string">&#x27;nick&#x27;</span>, <span class="hljs-string">&#x27;mail&#x27;</span>, <span class="hljs-string">&#x27;link&#x27;</span>]<br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">lang:</span> <span class="hljs-string">zh-CN</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">recordIP:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>重新生成网页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -g<br>hexo -d<br></code></pre></td></tr></table></figure><p>评论系统就出来了。</p><p>如果想在某个文章页关闭评论，或者想在某个自定义页面开启评论，可以通过在 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter </a>设置 <code>comment: bool</code> 来控制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">comment: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>文章页的 comment的默认值为true</p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>hexo</tag>
      
      <tag>建站</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从写DDNS脚本出发学习sed&amp;grep字符串的处理</title>
    <link href="/2020/12/16/sed&amp;grep%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <url>/2020/12/16/sed&amp;grep%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>想写一个利用API自动从dnspod获取基本信息的脚本，因为是零基础，只能从需求出发，发现了sed和grep这两个命令，也是从需求出发，只学习了很小一部份功能，以下是实现方式。</p><a id="more"></a><p>我们从下面这条API可以返回一条字符串，这将是数据源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST https://dnsapi.cn/Domain.List -d <span class="hljs-string">&#x27;login_token=&#x27;</span><span class="hljs-variable">$token</span><span class="hljs-string">&#x27;&amp;format=json&#x27;</span>\    <span class="hljs-comment"># $token需要先获取和定义</span><br></code></pre></td></tr></table></figure><p>下面这一条可以输出成json格式的，返回的就是分行的，省得再换行处理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST https://dnsapi.cn/Domain.List -d <span class="hljs-string">&#x27;login_token=&#x27;</span><span class="hljs-variable">$token</span><span class="hljs-string">&#x27;&amp;format=json&#x27;</span>\ | python -m json.tool<br></code></pre></td></tr></table></figure><h4 id="获取domain-id"><a href="#获取domain-id" class="headerlink" title="获取domain id"></a>获取domain id</h4><p>先看代码，再来分解命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST https://dnsapi.cn/Domain.List -d <span class="hljs-string">&#x27;login_token=&#x27;</span><span class="hljs-variable">$token</span><span class="hljs-string">&#x27;&amp;format=json&#x27;</span>\ | sed <span class="hljs-string">&#x27;s/,/\n/g&#x27;</span> | grep <span class="hljs-string">&quot;id&quot;</span> | sed -n <span class="hljs-string">&#x27;1p&#x27;</span> | grep -Eo <span class="hljs-string">&#x27;[0-9]&#123;1,8&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>如果用json就用这行，返回值顺序不一样，结果没有区别。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST https://dnsapi.cn/Domain.List -d <span class="hljs-string">&#x27;login_token=&#x27;</span><span class="hljs-variable">$token</span><span class="hljs-string">&#x27;&amp;format=json&#x27;</span>\ | python -m json.tool | grep <span class="hljs-string">&quot;id&quot;</span> | sed -n <span class="hljs-string">&#x27;2p&#x27;</span> | grep -Eo <span class="hljs-string">&#x27;[0-9]&#123;1,8&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="字符串换行"><a href="#字符串换行" class="headerlink" title="字符串换行"></a>字符串换行</h4><p>sed是非交互文体处理命令，可以很方便的处理行信息。</p><p>分析API返回值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;status&quot;</span>:&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;\u64cd\u4f5c\u5df2\u7ecf\u6210\u529f\u5b8c\u6210&quot;</span>,<span class="hljs-string">&quot;created_at&quot;</span>:<span class="hljs-string">&quot;2020-12-16 14:30:44&quot;</span>&#125;,<span class="hljs-string">&quot;info&quot;</span>:&#123;<span class="hljs-string">&quot;domain_total&quot;</span>:1,<span class="hljs-string">&quot;all_total&quot;</span>:1,<span class="hljs-string">&quot;mine_total&quot;</span>:1,<span class="hljs-string">&quot;share_total&quot;</span>:0,<span class="hljs-string">&quot;vip_total&quot;</span>:0,<span class="hljs-string">&quot;ismark_total&quot;</span>:0,<span class="hljs-string">&quot;pause_total&quot;</span>:0,<span class="hljs-string">&quot;error_total&quot;</span>:0,<span class="hljs-string">&quot;lock_total&quot;</span>:0,<span class="hljs-string">&quot;spam_total&quot;</span>:0,<span class="hljs-string">&quot;vip_expire&quot;</span>:0,<span class="hljs-string">&quot;share_out_total&quot;</span>:0&#125;,<span class="hljs-string">&quot;domains&quot;</span>:[&#123;<span class="hljs-string">&quot;id&quot;</span>:12345678,<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;enable&quot;</span>,<span class="hljs-string">&quot;grade&quot;</span>:<span class="hljs-string">&quot;DP_Free&quot;</span>,<span class="hljs-string">&quot;group_id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;searchengine_push&quot;</span>:<span class="hljs-string">&quot;no&quot;</span>,<span class="hljs-string">&quot;is_mark&quot;</span>:<span class="hljs-string">&quot;no&quot;</span>,<span class="hljs-string">&quot;ttl&quot;</span>:<span class="hljs-string">&quot;600&quot;</span>,<span class="hljs-string">&quot;cname_speedup&quot;</span>:<span class="hljs-string">&quot;disable&quot;</span>,<span class="hljs-string">&quot;remark&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;created_on&quot;</span>:<span class="hljs-string">&quot;2017-09-26 16:42:05&quot;</span>,<span class="hljs-string">&quot;updated_on&quot;</span>:<span class="hljs-string">&quot;2020-12-16 00:25:00&quot;</span>,<span class="hljs-string">&quot;punycode&quot;</span>:<span class="hljs-string">&quot;xxxxx.top&quot;</span>,<span class="hljs-string">&quot;ext_status&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;src_flag&quot;</span>:<span class="hljs-string">&quot;DNSPOD&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;xxxxx.top&quot;</span>,<span class="hljs-string">&quot;grade_level&quot;</span>:2,<span class="hljs-string">&quot;grade_ns&quot;</span>:[<span class="hljs-string">&quot;f1g1ns1.dnspod.net&quot;</span>,<span class="hljs-string">&quot;f1g1ns2.dnspod.net&quot;</span>],<span class="hljs-string">&quot;grade_title&quot;</span>:<span class="hljs-string">&quot;\u514d\u8d39\u7248&quot;</span>,<span class="hljs-string">&quot;is_vip&quot;</span>:<span class="hljs-string">&quot;no&quot;</span>,<span class="hljs-string">&quot;owner&quot;</span>:<span class="hljs-string">&quot;xxxxx@qcloud.com&quot;</span>,<span class="hljs-string">&quot;records&quot;</span>:<span class="hljs-string">&quot;20&quot;</span>&#125;]&#125;<br><br></code></pre></td></tr></table></figure><p>需要把这一长串分段，方便提取，看起来用”,”来分段是比较理想。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed <span class="hljs-string">&#x27;s/,/\n/g&#x27;</span>            <span class="hljs-comment">#将字符串里的“,”换成换行符“\n”</span><br></code></pre></td></tr></table></figure><p>sed可以直接读取文件、操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed <span class="hljs-string">&#x27;s/,/\n/g&#x27;</span> 1.log          <span class="hljs-comment">#从文件1.log里读出内容到内存再处理，并不会改动1.log，可以用来赋值或输出到文件</span><br>sed <span class="hljs-string">&#x27;s/,/\n/g&#x27;</span> 1.log &gt; 2.log  <span class="hljs-comment">#将结果存在2.log</span><br></code></pre></td></tr></table></figure><h4 id="匹配数据"><a href="#匹配数据" class="headerlink" title="匹配数据"></a>匹配数据</h4><p><em>grep</em> 命令用于查找文件里符合条件的字符串</p><p><del><em>经过上一步的处理，数据分成了许多行，我们只需要找到”id”:这一行</em></del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;id&quot;</span><br></code></pre></td></tr></table></figure><p><del><em>过这一步就数据只剩两行了</em></del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;domains&quot;</span>:[&#123;<span class="hljs-string">&quot;id&quot;</span>:12345678<br><span class="hljs-string">&quot;group_id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span><br></code></pre></td></tr></table></figure><p><del>*我们要的是第一行，还行sed来</del>*</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed -n <span class="hljs-string">&#x27;1p&#x27;</span>                  <br></code></pre></td></tr></table></figure><p>按行取值容易出错，直接查找带”号的id就完美了，为此又去了解一下转义符的知识。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep <span class="hljs-string">&quot;\&quot;id\&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>我们只要那一组8位数字，方便赋值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">grep -Eo <span class="hljs-string">&#x27;[0-9]&#123;1,8&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="获取record-id"><a href="#获取record-id" class="headerlink" title="获取record_id"></a>获取record_id</h4><p>与domain_id不同的时，返回值中第一条记录都是一段，所以要sed两次，才能提到想要的id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sed <span class="hljs-string">&#x27;s/&#125;/\n/g&#x27;</span>    <span class="hljs-comment">#以&#125;换行</span><br>sed <span class="hljs-string">&#x27;s/,/\n/g&#x27;</span>    <span class="hljs-comment">#以，换行</span><br></code></pre></td></tr></table></figure><p>转码</p><p>API返回的值是<strong>Unicode</strong>，要想显示中文要去转码，可以加了一条转码命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -e <br></code></pre></td></tr></table></figure><h4 id="最终脚本"><a href="#最终脚本" class="headerlink" title="最终脚本"></a>最终脚本</h4><p>事先在官网新建一个密钥，再新建一条A记录（ipv4）或AAAA记录（ipv6），值随便填。</p><p>还是把手动项单独放一个文件比较方便。</p><p>把以下信息写在./config里，这是唯一需要手动填写的地方</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">token=&quot;123456,ddddddxxxxxxx&quot;                            #引号中不要留空格                         <br>sub_domain=&quot;bba&quot;                                        #引号中不要留空格                            <br></code></pre></td></tr></table></figure><p>下面是record.sh的内容，正常情况此脚本不需要手动运行，获取信息错误，则检查此文件的写法是否已不符合官方API</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">####获取API信息####</span><br>token=$(sed <span class="hljs-string">&#x27;s/&quot;/\n/g&#x27;</span> ./config | sed -n <span class="hljs-string">&#x27;2p&#x27;</span>)                                         <span class="hljs-comment">#DNSPOD密钥  </span><br>sub_domain=$(sed <span class="hljs-string">&#x27;s/&quot;/\n/g&#x27;</span> ./config | sed -n <span class="hljs-string">&#x27;5p&#x27;</span>)                                    <span class="hljs-comment">#主机记录名</span><br>domain=$(curl -X POST https://dnsapi.cn/Domain.List -d <span class="hljs-string">&#x27;login_token=&#x27;</span><span class="hljs-variable">$token</span><span class="hljs-string">&#x27;&amp;format=json&#x27;</span>\ | python -m json.tool | grep <span class="hljs-string">&quot;\&quot;id\&quot;&quot;</span> | grep -Eo <span class="hljs-string">&#x27;[0-9]&#123;1,8&#125;&#x27;</span>)                  <span class="hljs-comment">#获取domain_id</span><br>record=$(curl -k <span class="hljs-string">&#x27;https://dnsapi.cn/Record.List&#x27;</span> -d <span class="hljs-string">&#x27;login_token=&#x27;</span><span class="hljs-variable">$token</span><span class="hljs-string">&#x27;&amp;format=json&amp;domain_id=&#x27;</span><span class="hljs-variable">$domain</span><span class="hljs-string">&#x27;&#x27;</span> | sed <span class="hljs-string">&#x27;s/&#125;/\n/g&#x27;</span> | grep <span class="hljs-string">&quot;\&quot;<span class="hljs-variable">$sub_domain</span>\&quot;&quot;</span> | sed <span class="hljs-string">&#x27;s/,/\n/g&#x27;</span> | grep <span class="hljs-string">&quot;\&quot;id\&quot;&quot;</span> | grep -Eo <span class="hljs-string">&#x27;[0-9]&#123;1,9&#125;&#x27;</span>)<span class="hljs-comment">#获取record_id</span><br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&#x27;domain_id=&#x27;</span><span class="hljs-variable">$domain</span><span class="hljs-string">&#x27;\nrecord_id=&#x27;</span><span class="hljs-variable">$record</span><span class="hljs-string">&#x27;\nsub_domain=&#x27;</span><span class="hljs-variable">$sub_domain</span> &gt; ./<span class="hljs-variable">$sub_domain</span><span class="hljs-comment">#存档备用</span><br><span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure><p>下面是之前的脚本，做了相应的修改，可以设置定时运行此文件，脚本有检测程序不会频繁访问API。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">###API信息</span><br><span class="hljs-comment"># token文件保存位置</span><br>token_file=<span class="hljs-string">&quot;./config&quot;</span><br><span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;<span class="hljs-variable">$token_file</span>&quot;</span> ];<span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;没有config文件，创建后重试&quot;</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>token=$(sed <span class="hljs-string">&#x27;s/&quot;/\n/g&#x27;</span> <span class="hljs-variable">$token_file</span> | sed -n <span class="hljs-string">&#x27;2p&#x27;</span>)                                      <span class="hljs-comment">#DNSPOD密钥  </span><br>sub_domain=$(sed <span class="hljs-string">&#x27;s/&quot;/\n/g&#x27;</span> <span class="hljs-variable">$token_file</span> | sed -n <span class="hljs-string">&#x27;5p&#x27;</span>)                                    <span class="hljs-comment">#主机记录名</span><br><br><span class="hljs-comment"># 监测日志保存位置</span><br>log_file=<span class="hljs-string">&quot;./<span class="hljs-variable">$sub_domain</span>.log&quot;</span><br><span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;<span class="hljs-variable">$log_file</span>&quot;</span> ];<span class="hljs-keyword">then</span><br>touch <span class="hljs-string">&quot;<span class="hljs-variable">$log_file</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment"># 变动前的公网 IP 保存位置</span><br>ip_file=<span class="hljs-string">&quot;./<span class="hljs-variable">$sub_domain</span>.ip.log&quot;</span><br><br><span class="hljs-comment">##################  功能定义  ####################</span><br>ipv6=<span class="hljs-string">&#x27;&#x27;</span><br>update=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment">#日志</span><br><span class="hljs-function"><span class="hljs-title">log</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span>  <span class="hljs-string">&quot;[<span class="hljs-subst">$(date)</span>] - <span class="hljs-variable">$1</span>&quot;</span> &gt;&gt; <span class="hljs-variable">$log_file</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment">####API信息验证####</span><br><span class="hljs-comment">####检查API文件,没有则生成文件#####</span><br>record_file=<span class="hljs-string">&#x27;./&#x27;</span><span class="hljs-variable">$sub_domain</span><br><span class="hljs-function"><span class="hljs-title">check_config</span></span>() &#123;<br><span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$record_file</span> ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;已配置文件，检查继续.&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;没有API文件，现在获取&quot;</span><br>    <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;没有API文件，现在获取&quot;</span><br>    ./record.sh<br><span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment">######判断API获取是否有误#####</span><br><span class="hljs-function"><span class="hljs-title">check_api</span></span>() &#123;<br>sub_test=$(sed <span class="hljs-string">&#x27;s/=/\n/g&#x27;</span> ./<span class="hljs-variable">$sub_domain</span> | sed -n <span class="hljs-string">&#x27;6p&#x27;</span>)<br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$sub_test</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$sub_domain</span>&quot;</span> ];<span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;域名主机记录正确，检查继续.&quot;</span><br>            domain=$(sed <span class="hljs-string">&#x27;s/=/\n/g&#x27;</span> ./<span class="hljs-variable">$sub_domain</span> | sed -n <span class="hljs-string">&#x27;2p&#x27;</span>)<br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$domain</span> =~ [0-9]&#123;8&#125; ]];<span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;已有domain信息，检查继续.&quot;</span> <br>record=$(sed <span class="hljs-string">&#x27;s/=/\n/g&#x27;</span> ./<span class="hljs-variable">$sub_domain</span> | sed -n <span class="hljs-string">&#x27;4p&#x27;</span>)<br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$record</span> =~ [0-9]&#123;9&#125; ]];<span class="hljs-keyword">then</span><br>record=$(sed <span class="hljs-string">&#x27;s/=/\n/g&#x27;</span> ./<span class="hljs-variable">$sub_domain</span> | sed -n <span class="hljs-string">&#x27;4p&#x27;</span>)<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;已有record信息，现在继续&quot;</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;record信息有误，请通过record.sh重新获取&quot;</span><br><span class="hljs-built_in">log</span> <span class="hljs-string">&quot;record信息有误，请通过record.sh重新获取&quot;</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span> <br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;domain信息有误，请通过record.sh重新获取&quot;</span><br><span class="hljs-built_in">log</span> <span class="hljs-string">&quot;domain信息有误，请通过record.sh重新获取&quot;</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;域名主机记录不匹配，请重新设置后运行record.sh&quot;</span><br><span class="hljs-built_in">log</span> <span class="hljs-string">&quot;域名主机记录不匹配，请重新设置后运行record.sh&quot;</span><br><span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment">#判断IP是否变化，不变化则结束程序</span><br><span class="hljs-function"><span class="hljs-title">check_ip_change</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$ip_file</span> ]; <span class="hljs-keyword">then</span><br>        old_ip=$(cat <span class="hljs-variable">$ip_file</span>)<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$ipv6</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$old_ip</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;IP has not changed.&quot;</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;IP has not changed.&quot;</span><br>            <span class="hljs-built_in">exit</span> 0<br>        <span class="hljs-keyword">fi</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment">#更新 DNS 记录</span><br><span class="hljs-function"><span class="hljs-title">update_dns</span></span>() &#123;<br>  update=$(curl -X POST https://dnsapi.cn/Record.Modify -d <span class="hljs-string">&#x27;login_token=&#x27;</span><span class="hljs-variable">$token</span><span class="hljs-string">&#x27;&amp;format=json&amp;domain_id=&#x27;</span><span class="hljs-variable">$domain</span><span class="hljs-string">&#x27;&amp;record_id=&#x27;</span><span class="hljs-variable">$record</span><span class="hljs-string">&#x27;&amp;sub_domain=&#x27;</span><span class="hljs-variable">$sub_domain</span><span class="hljs-string">&#x27;&amp;value=&#x27;</span><span class="hljs-variable">$ipv6</span><span class="hljs-string">&#x27;&amp;record_type=AAAA&amp;record_line=%e9%bb%98%e8%ae%a4&#x27;</span>)<br>  &#125;<br>  <br><span class="hljs-comment">###################  脚本主体  ###################</span><br><span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Script start.&quot;</span><br><br><span class="hljs-comment"># 获取Ipv6地址</span><br>ipv6=$(ip addr show|grep -v deprecated|grep -A1 <span class="hljs-string">&#x27;inet6 [^f:]&#x27;</span>|sed -nr <span class="hljs-string">&#x27;:a;N;s#^ +inet6 ([a-f0-9:]+)/.+? scope global .*?valid_lft ([0-9]+sec) .*#\2 \1#p;ta&#x27;</span>|grep <span class="hljs-string">&#x27;ff:fe&#x27;</span>|sort -nr|head -n1|cut -d<span class="hljs-string">&#x27; &#x27;</span> -f2)<br><br><span class="hljs-comment">#判断是否成功获取到IP</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$ipv6</span>&quot;</span> == <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Can not get IP address.Please check your network connection.&quot;</span><br>    <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Can not get IP address.Please check your network connection.&quot;</span><br>    <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#检查信息完整</span><br>check_config<br>check_api<span class="hljs-comment">#</span><br><br><span class="hljs-comment">#检查IP是否变化</span><br>check_ip_change<br><br><span class="hljs-comment">#更新 DNS 记录</span><br>update_dns<br><br><span class="hljs-comment">#判断是否成功</span><br><span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;u6210&quot;</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$update</span> == *<span class="hljs-variable">$test</span>* ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$ipv6</span>&quot;</span> &gt; <span class="hljs-variable">$ip_file</span><br>    <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;<span class="hljs-variable">$record_name</span> IP changed to: <span class="hljs-variable">$ipv6</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$record_name</span> IP changed to: <span class="hljs-variable">$ipv6</span>&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;API UPDATE FAILED. DUMPING RESULTS:\n<span class="hljs-variable">$update</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;API UPDATE FAILED. DUMPING RESULTS:\n<span class="hljs-variable">$update</span>&quot;</span><br>    <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br> <span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shell</tag>
      
      <tag>ddns</tag>
      
      <tag>dnspod</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>路由器的ipv6放行</title>
    <link href="/2020/12/15/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84ipv6%E6%94%BE%E8%A1%8C/"/>
    <url>/2020/12/15/%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84ipv6%E6%94%BE%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码" /><label>您好, 这里需要密码</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="273a9e43afa4f645efbb37dcebe673864e198b7679d2362da0ac8136e16bece7">fe6387f4031561f5d0681acda8830f3c120180045b3ccfb35d9c296a4d51d0ee6ac06a28e06d43f8f8a31b035afc228e46daf821aeb059f68b034dec2ab3b0e7090010acf10f6966d3b7fb15004665f1bf8b08dc1762ee2ab0d7a0bf5ac5d1737a9d06a77ac9d0445bb2505b7e785155ff125c74f13f10302d11410518a85efa79400c2f8fbecf4f36fdf452570816be269a7b7b473dc27806e7ee16127c652dad69cb5d9fdcb677caa7d11688c7983f5beaa85048873f41cfd6d0b2a158ec50d2e17c171136f2179eacb295c636432561f97ae97cefb82a98a54fe644f707bfa12ed832f289a6fb7dbd973026a7cca02c771cf495cfd322e0df6c7839cf6624012ee1ab59e5caea7e3d90221768220578326b54101a81325df1c564bb864c6c8d26631a75ae27e82e23798a9f6721952a460e47c872c096cec056b3186bd61bec2a9898a4be07242d2018610e403d784bd5fee8b1bc5cd85387a996f8211d0effd7fcd9dcebd05dd8cb8c2102d8673fea89de6f6ac62ff73c71ded57039bcf468e2e40640a3fc5d5f70f32f192e5fac8bcd0f9fc10fff47e95b4c6a4be7dafcb905ac88cda32e09434ac7d08bc854a06f3e1096fafac87e9568c402af36e459517efa4fbc8e658e697435ae6e490f6014b14191122cb590acec40606dc812b3f59454072f2961f8493e795d1502f2177d09ee20c485217c338b002a2e45c34f43785804065ee9362a38c1d548b48cbfc2229545ab0277630a9d4f696b50d0884e26927f7b0ccdcee71a4b67436c7885a3c2a4ae13d3cca9e54f6f1b0112a8f786a2c844a978fa283d2b66af58126110980d17f2f81a066104c526763e81afc1b1b1ba6e6df0514464f0f85918356bde3aa787693984c374212a79a72f2e8f38c420785e039cd4779609df8be012b076885ab26e0253f16e9e79bdb1205dec081aa9bc9e405e86ba56f1d7e65b3b73a149a00bf14fa70dc1af57585ebda6b79f48f6202ea6de8a7d9cc89bc2fd3185e1b9a6cb59c7f7cbf04cfcb21bf1b4a1c8db1a86fb1736edd0bbf52f14cd9cc612ab440090f2bb42160987531bbda01af59e7897ea856af5794bdc13bc2724e520965065c37c68a6bf90b19e89e80d9e4dda5215a48a1ae346d83d9028ed3997cb9d75361a3a3f94999f2189e3b14d346f555152fe776a5374433408cb5aa1e1506c67249421c929b51b7620d1a56e564b2f43b0671b4af00b59ae49b90df0bf4299de030462149da6a7d8e379b0d6966caf0bf5848323c2d2b894d62d1f11d22f5d94377ff9e30b5b3aa042d728bc24df8818ab0a2d72d21c12813ed3dea51036513c2e627d85eefcf33275c808e1ff5435cf5e4a2d6bdca1c6bc8a003b716bdf55cfc318f1cf8f6e66c86deb85e20aab27a08e418b0b3e329bd8973c35c81219221903edf56808f933b8a55789d7f3e584807f72c8b03fe4fa6d7e52b9e13acfc3747761ce37457b0a92cfce56bce29ade012e584a41cd4b4ca2f3d7ea0ca2c0857a837725b4db56c93adc2060bf881ace7d7e5976b7bbf13ea1dc1c171378977d718c3be47d736b5867de559c2b362deb718a1874e48f9d7c8257887e4b550a85d3c5d957660e559c6abf433387247d949cceda13fe9e85b29b8e5dd93cd2f2b3789e191af7201b7140e52feb71bafa320d1160915b883a9ad6e1db89d6e6098d908e3eca60303934a17976c1e2e57f38b58a4f73dbf13ab2e14f8bf041647e412cd4fc448086c70985c773d05f5a0126724404bfd698cff7315a5afba54c0b086e5a8f29bfc41a5c331149127c2e1322ddaacb8ee44873fd3f68b5de0f6de669b9e870f5e065a8cdca24ee8ca569159fc7345775f11dc37fa43311788b1f37bfe456431327c83d0363ade32658e61fb4e197f4fb2555d7a221d0d51e7bfdbf71591107ab1c5e8a15e150e4efa25acce9b9914ec0b4f98329d6adbdcb2f0189ebad0e46952fcfa5602c3284fde712078aca2fea540d2267da59bb0358ee72efd232c0a72760159fdf3e263fbe001f76707302f88845681218b429a6d1e186875c263001aa75b224fcb7e84e54f262a81a8988a1f8312c2dc3a8d21d430d02905eef905c8b31db517784a332a476605673ed901a1173f053c6f51fd749857956889edd4f7151673ad4df370b7a08510a634aa2373068c5248235f0682132ce50b3a2d486dd9f1d9a30dad77d799019e96a4a394978892752c47446f00df4d4c7f12eec0ad83c8a08a2b862dfd34a1d298575224d8bad71f23475db2bc23dbf4423fe4355705a05aad430b647447030071df77db5deb8f001af0b4bb1e92aef65bb73d9a4f6080f6320ea8f4352b213a585a12fd4eb87f3f3354203e07ce5f1c261aca4acca2b3e259f9477af9fe41ca512765ef14695634c61fbccf68153f9a004c41a8dbcbc99766929be024b0752fdcf1f577238f43c0dbcff05b39c11ecefe22af0193dd8519012383438d14d9a2ed4d260dbd46218ddc1421f988e3c56fc5092dc2e30d8c6e9b88c20742365f79ff1e8bac3c6f2425b368de2eb98c18be0e35fe597bbafca51c661ba88129cf35bec04a01be719229b40bb1df80ca5c432e4fa9957f6ef7a2acfc8c30b900cef4fb43676ef361c2d5d00669cfdd6367810f927e4897619599eb1505a40c793b3e63cdbaa8586d069cc60185c655227056523f029898cc75cb9ef4b86ebeab66bdde983ffc95ea6eac41bf5c433fd68d171122da91cda07eb90891cf4b6686c9e934105cf7141938d2ca5f49bc8130d53f5f1c5c31d0ffc0e8a55dd5e3240be308e79f2d78557d50c01798a7a5e27a7b74e7e65454d6abae289c36ce02a33d4457035b9d10fb468892cfbb1f6f9cf07b97974d553a2eed2140f1e03910f1343dab31ea4bed7ff74f7766c71cc848e456dc6fd8840dbf2d6882ffa2eac3bd22687226dcd38dd6ed6d934b7087006e4ed315f0d78d0eaa2a0236f80bd382cc6631ef80b69cfbff49c936648207dd4c49da1c66ec628bd5cd5d89325ed1540d512d957b1ac9e7e71ea04719ee59f27e8c34377bb774e229c5a98b67f32a5cd5921103cf772e738612e31a3af4db70355fbfb1eb2ef0a0bcca36c5b6daa3b26d4d8b5f991aab8fbaa44cc13d4e03ef248dd296d71be85fc8395875aca4335c2e45804819ea23c48b538ae9e74af5321de582e96607f806fc955660aaa0bbf0e8bd499818d30e98e9884cd055c42ac764cee3b256e2312afd2a4847debba926a61dfdc251a22df0c4a9b7298e95e44033d1fa2b72b49630eb028201e08b749db7b7d1c8c6d556aed6a5e2f137af54c7bace2d8315ad393a9615ca227e7d10ee78a8fd86436ef5f77d911ae5182004c00507c65d1059b527c828c0f5f9808dbf0d660c47f3172583d75fbc6f324495ac39a85773a9bef44d9888e439426d209a5192817b8f8ab081a35dad1a82aa85abf22529d0b14e66e986a763771593892b374d68b403977f6bc4c208733a775a49839f67371ab168da67591890c9b9ebee5bd14e834014d88c3209764a61bbf26f739cc49ed695474b43d0ba3630d47f468945ac58a0d53a4676fdb9fdb5d00ac282848495b373482db4580b65976a5eb0c28829ba69fca912b83abf2be4946029a70fa2715a1de5605fdaf967145a02147ebe2e3728eb5864b204df40477a4d363cc3fd1d383351af748c6bfb4efec7fb1f03e496659e73138f12c580d30d669ca698dd727a4eec9a7f3f3d9e0201502c98818296a5525f4ca3797c3a0841779cf642cf67d3417d91c43ee6b1a49c08c214e5edcca6d7e951a0446ca312f59c77e21ffe7c8e76a5aed645a7641a92fa26c7e95002fbc1664bfe94f90092770f0df6a960761c6e6ac0c1439229595c0a7ee5b6d93af9faf9c388d457a222130291314a4f27f075c80afea80fac4f04dcc382e08697fb1fabe7afe819cfbedd11c0fe7d68614184e421008ffc210c8182d9310d2a2dc46d411369f5728f3b38d13fae6ed813bdaf81bf308caf332902edde5062e989f08e5e4de60dd4c1a6bcc23fc71cefdf48ec3e4fae7cc63222e4198df7baa2f748fe6bf1730556e138bde7a56066ac45b4e273b72b2b02ae1133ada22805779649acaecffa03402f20122e4a16a64fb53d323e96ec12547a7d5dbeca3979b2762</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>软路由</category>
      
      <category>ipv6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>软路由</tag>
      
      <tag>ipv6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IPv6的DDNS自动更新实现</title>
    <link href="/2020/12/14/ipv6ddns/"/>
    <url>/2020/12/14/ipv6ddns/</url>
    
    <content type="html"><![CDATA[<p>最近把家里的ipv6弄好了，考虑放弃frp，转向ddns，找了一些自动脚本，试了好久终于成功。</p><a id="more"></a><h3 id="CloudFlare"><a href="#CloudFlare" class="headerlink" title="CloudFlare"></a>CloudFlare</h3><p>很久之前找以过dnspod的脚本，发现现在不工作了，现在经常用的一个域名挂在cloudflare，于是找到了一个脚本，试了很久都是出错，最后发现cloudflare关闭了对免费域名的API支持！！！</p><h3 id="DnsPod"><a href="#DnsPod" class="headerlink" title="DnsPod"></a>DnsPod</h3><p>还好还有一个域名在dnspod，参考了cloudflare的脚本，再翻了一下dnspod的api文档，终于把这个脚本弄好了。</p><p>以下是过程。</p><h4 id="准备dnspod基本信息"><a href="#准备dnspod基本信息" class="headerlink" title="准备dnspod基本信息"></a>准备dnspod基本信息</h4><p>   准备好域名，账号，以下是dnspod的官方api文档的脚本，其实应该写成自动获取，不过我对这个不熟悉，先手动运行了一遍，发现如果是自己用，没有必要把前面的信息获取写在脚本里，因为也很简单，而且长时间不会变。脚本主要是自动更新记录的作用。有时间我再写一个单独获取信息的脚本。（已经写好了，<a href="/2020/12/16/sed&grep%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%A4%84%E7%90%86/" title="在这里">在这里</a> )</p><ol><li><h5 id="创建一个密钥"><a href="#创建一个密钥" class="headerlink" title="创建一个密钥"></a>创建一个密钥</h5><p>​    ID: <em>123456</em>     Token:  <em>dkfsdfjssadf</em></p></li><li><h5 id="获取domain-ID"><a href="#获取domain-ID" class="headerlink" title="获取domain ID"></a>获取domain ID</h5> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST https://dnsapi.cn/Domain.List -d <span class="hljs-string">&#x27;login_token=123456,dkfsdfjssadfd&amp;format=json&#x27;</span>\<br>| python -m json.tool<br></code></pre></td></tr></table></figure><p> domain id: <em>87654321</em></p></li><li><h5 id="获取record-ID"><a href="#获取record-ID" class="headerlink" title="获取record ID"></a>获取record ID</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -k <span class="hljs-string">&#x27;https://dnsapi.cn/Record.List&#x27;</span> -d <span class="hljs-string">&#x27;login_token=123456,dkfsdfjssadfd&amp;format=json&amp;domain_id=87654321&#x27;</span> \<br>| python -m json.tool<br></code></pre></td></tr></table></figure><p>v6-record id: <em>123456789</em></p></li></ol><ol start="4"><li><h5 id="获取本机ipv6"><a href="#获取本机ipv6" class="headerlink" title="获取本机ipv6"></a>获取本机ipv6</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$(ip addr show eth0 | grep inet6 | sed ‘s/\/.*//g’ | awk ‘&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$2</span>&#125;’ | grep 2409)<br></code></pre></td></tr></table></figure><p>如果有个ipv6记录，可以使用这条脚本从多条记录中按顺序选择</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$(ip addr show eth0 | grep inet6 | sed ‘s/\/.*//g’ | awk ‘&#123;<span class="hljs-built_in">print</span> <span class="hljs-variable">$2</span>&#125;’ | grep 2409 | awk ‘NR==1&#123;<span class="hljs-built_in">print</span>&#125;’)<br></code></pre></td></tr></table></figure></li><li><h5 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST https://dnsapi.cn/Record.Modify -d <span class="hljs-string">&#x27;login_token=123456,dkfsdfjssadfdd&amp;format=json&amp;domain_id=87654321&amp;record_id=123456789&amp;sub_domain=v6&amp;value=2409:8a62:dd:abce:bbbb:aaa:1:1&amp;record_type=AAAA&amp;record_line_id=10%3D0&#x27;</span><br></code></pre></td></tr></table></figure></li></ol><p>到此已经完成了ipv6记录的添加，以下是自动更新脚本。</p><p>参考了网上cloudflare的脚本写法。</p><p>将脚本放在定时任务即可，可以每隔5分钟运行一次，里面有ip变化检测，不对频繁访问api。</p><p>注意脚本用的日志文件是ip文件相对路径，可以cd到脚本目录再运行，也可以改成绝对路径。文件需要先创建好，不然会报错。</p><p>脚本在群晖和软路由上运行良好。</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#用户配置在引号内将你的参数填入</span><br>token=<span class="hljs-string">&#x27;123456,dkfsdfjssadfd&#x27;</span><br>domain=<span class="hljs-string">&#x27;87654321&#x27;</span><br>record=<span class="hljs-string">&#x27;123456789&#x27;</span><br>sub_domain=<span class="hljs-string">&#x27;ddns&#x27;</span><br><br><span class="hljs-comment"># 变动前的公网 IP 保存位置</span><br>ip_file=<span class="hljs-string">&quot;./v6_ip.log&quot;</span><br><br><span class="hljs-comment"># 监测日志保存位置</span><br>log_file=<span class="hljs-string">&quot;./v6.log&quot;</span><br><br><span class="hljs-comment">##################  功能定义  ####################</span><br>ipv6=<span class="hljs-string">&#x27;&#x27;</span><br>update=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment">#日志</span><br><span class="hljs-function"><span class="hljs-title">log</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$1</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>sed -i <span class="hljs-string">&quot;1i[<span class="hljs-subst">$(date)</span>] - <span class="hljs-variable">$1</span>&quot;</span>  <span class="hljs-variable">$log_file</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><span class="hljs-comment">#判断IP是否变化，不变化则结束程序</span><br><span class="hljs-function"><span class="hljs-title">check_ip_change</span></span>() &#123;<br>    <span class="hljs-keyword">if</span> [ -f <span class="hljs-variable">$ip_file</span> ]; <span class="hljs-keyword">then</span><br>        old_ip=$(cat <span class="hljs-variable">$ip_file</span>)<br>        <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$ipv6</span>&quot;</span> == <span class="hljs-string">&quot;<span class="hljs-variable">$old_ip</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>            <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;IP has not changed.&quot;</span><br>            <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;IP has not changed.&quot;</span><br>            <span class="hljs-built_in">exit</span> 0<br>        <span class="hljs-keyword">fi</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment">#更新 DNS 记录</span><br><span class="hljs-function"><span class="hljs-title">update_dns</span></span>() &#123;<br>  update=$(curl -X POST https://dnsapi.cn/Record.Modify -d <span class="hljs-string">&#x27;login_token=&#x27;</span><span class="hljs-variable">$token</span><span class="hljs-string">&#x27;&amp;format=json&amp;domain_id=&#x27;</span><span class="hljs-variable">$domain</span><span class="hljs-string">&#x27;&amp;record_id=&#x27;</span><span class="hljs-variable">$record</span><span class="hljs-string">&#x27;&amp;sub_domain=&#x27;</span><span class="hljs-variable">$sub_domain</span><span class="hljs-string">&#x27;&amp;value=&#x27;</span><span class="hljs-variable">$ipv6</span><span class="hljs-string">&#x27;&amp;record_type=AAAA&amp;record_line=%e9%bb%98%e8%ae%a4&#x27;</span>)<br>  &#125;<br>  <br><span class="hljs-comment">###################  脚本主体  ###################</span><br><span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Script start.&quot;</span><br><br><span class="hljs-comment"># 获取Ipv6地址</span><br>ipv6=$(ip addr show|grep -v deprecated|grep -A1 <span class="hljs-string">&#x27;inet6 [^f:]&#x27;</span>|sed -nr <span class="hljs-string">&#x27;:a;N;s#^ +inet6 ([a-f0-9:]+)/.+? scope global .*?valid_lft ([0-9]+sec) .*#\2 \1#p;ta&#x27;</span>|grep <span class="hljs-string">&#x27;ff:fe&#x27;</span>|sort -nr|head -n1|cut -d<span class="hljs-string">&#x27; &#x27;</span> -f2)<br><br><span class="hljs-comment">#判断是否成功获取到IP</span><br><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$ipv6</span>&quot;</span> == <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Can not get IP address.Please check your network connection.&quot;</span><br>    <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;Can not get IP address.Please check your network connection.&quot;</span><br>    <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment">#检查IP是否变化</span><br>check_ip_change<br><br><span class="hljs-comment">#更新 DNS 记录</span><br>update_dns<br><br><span class="hljs-comment">#根据返回值判断是否成功</span><br><span class="hljs-built_in">test</span>=<span class="hljs-string">&quot;u6210&quot;</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$update</span> == *<span class="hljs-variable">$test</span>* ]]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$ipv6</span>&quot;</span> &gt; <span class="hljs-variable">$ip_file</span><br>    <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;<span class="hljs-variable">$record_name</span> IP changed to: <span class="hljs-variable">$ipv6</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$record_name</span> IP changed to: <span class="hljs-variable">$ipv6</span>&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">log</span> <span class="hljs-string">&quot;API UPDATE FAILED. DUMPING RESULTS:\n<span class="hljs-variable">$update</span>&quot;</span><br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;API UPDATE FAILED. DUMPING RESULTS:\n<span class="hljs-variable">$update</span>&quot;</span><br>    <span class="hljs-built_in">exit</span> 0<br><span class="hljs-keyword">fi</span><br> <span class="hljs-built_in">exit</span> 0<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软路由</category>
      
      <category>ipv6</category>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>IPv6</tag>
      
      <tag>DDNS</tag>
      
      <tag>路由</tag>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>N1盒子安装docker-openwrt-smartdns</title>
    <link href="/2020/12/14/N1-docker/"/>
    <url>/2020/12/14/N1-docker/</url>
    
    <content type="html"><![CDATA[<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li><a href="#h1">N1安装armbian5.9.1</a></li><li><a href="#h2">安装docker</a></li><li><a href="#h3">docker下安装Pihole容器、openwrt容器</a></li><li><a href="#h4">Pihole 配置</a></li><li><a href="#h5">smartdns配置</a></li><li><a href="#h6">硬件设备/连接方式</a></li></ul><h4 id="N1安装armbian5-9-1"><a href="#N1安装armbian5-9-1" class="headerlink" title="N1安装armbian5.9.1"></a><span id="h1">N1安装armbian5.9.1</span></h4><ol><li><p>​    刷回电视盒子系统</p><ul><li>先把USB对公线链接到电脑USB口与N1的第二个口（靠HDMI口），N1不要通电。</li><li>打开USB_Burning_Tool，导入固件WEBPAD大的2.2的线刷包，验证通过后，出现开始字样</li><li>勾选擦除FLASH，不要勾选擦除bootloader，USB_Burning_Tool点击开始运行刷机，3秒钟内速度让N1通电。</li><li>USB_Burning_Tool开始正常识别N1线刷模式，刷机开始。</li><li>烧录完成后，拔电重启，N1恢复了原来的样子，可以正常ADB连接，进入线刷，重新安装ARMBIAN。</li></ul></li><li><p>刷armbian系统到U盘</p><ul><li><p>用Win32DiskImager.exe工具先刷入Armbian_5.91_Aml-s905_Debian_buster_default_5.1.15_20190710.img到U盘。</p></li><li><p>将meson-gxl-s905d-phicomm-n1-k510-snail.dtb放入u盘中dtb文件夹。</p></li><li><p>修改uEnv.ini：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dtb_name=/dtb/meson-gxl-s905d-phicomm-n1-k510-snail.dtb<br></code></pre></td></tr></table></figure></li></ul></li><li><p>进入线刷模式</p><ul><li>路由器中找到类似：FC:7C:02:EA:33:32的MAC对应的ip地址。</li><li>然后进入线刷模式，成功进入线刷马上插入U盘，等待系统开机。</li></ul></li></ol><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a><span id="h2">安装docker</span></h4><ol><li><p>修改成国内源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /etc/apt/sources.list<br><br>deb http://mirrors.ustc.edu.cn/debian stretch main contrib non-free<br>deb http://mirrors.ustc.edu.cn/debian stretch-updates main contrib non-free<br>deb http://mirrors.ustc.edu.cn/debian stretch-backports main contrib non-free<br>deb http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free<br></code></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>更新软件源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get update<br></code></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL https://get.docker.com -o get-docker.sh<br>sh get-docker.sh --mirror Aliyun<br></code></pre></td></tr></table></figure></li><li><p>设置docker开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start docker<br></code></pre></td></tr></table></figure></li></ol><h4 id="docker下安装Pihole容器、openwrt容器"><a href="#docker下安装Pihole容器、openwrt容器" class="headerlink" title="docker下安装Pihole容器、openwrt容器"></a><span id="h3">docker下安装Pihole容器、openwrt容器</span></h4><ol><li><p>准备工作，设置网络环境</p><ol><li><p>设置宿主机网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/network/interfaces<br><br>auto eth0<br>iface eth0 inet manual<br>auto macvlan<br>iface macvlan inet static<br>address 192.168.1.3<br>netmask 255.255.255.0<br>gateway 192.168.1.1<br>dns-nameservers 192.168.1.1<br>pre-up ip link add macvlan link eth0 type macvlan mode bridge<br>post-down ip link del macvlan link eth0 type macvlan mode bridge<br>vi /etc/resolv.conf<br>nameserver 192.168.1.1<br></code></pre></td></tr></table></figure><p>设置不可更改 : chattr +i /etc/resolv.conf<br>设置macvlan网卡，首次需要设置,以后不需要设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ip link set eth0 promisc on<br>docker network create -d macvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 -o parent=eth0 macnet<br></code></pre></td></tr></table></figure></li><li><p>安装Pihole</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull pihole/pihole<br>docker run -d --name pihole --network macnet --ip 192.168.1.5 -e TZ=&quot;Asia/Shanghai&quot; -v /mnt/pihole/pihole/:/etc/pihole/ -v /mnt/pihole/dnsmasq.d/:/etc/dnsmasq.d/ --dns=127.0.0.1 --dns=192.168.1.1 --restart always pihole/pihole:latest<br></code></pre></td></tr></table></figure><p>设置密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it pihole pihole -a -p<br></code></pre></td></tr></table></figure><p>注意：不要汉化，汉化之后无法设置dns地址#端口。<br>首次启动比较慢，需要等待10-15分钟，才能打开192.168.1.5管理页面。</p></li><li><p>安装openwrt</p><ul><li><p>这边感谢梁非凡大神，使用梁非凡大神12月5日发的docker版openwrt镜像</p></li><li><p>将镜像openwrt-armvirt-64-default-rootfs.tar.gz上传到当前目录下，注意gz压缩格式</p></li><li><p>导入镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker import openwrt-armvirt-64-default-rootfs.tar.gz openwrt:R9.12.5<br></code></pre></td></tr></table></figure></li><li><p>运行容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run --restart always --name openwrt -d --network macnet --privileged openwrt:R9.12.5 /sbin/init<br></code></pre></td></tr></table></figure></li><li><p>进入openwrt容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps              #获取openwrt对应的容器ID<br>docker exec -it a19748c95b15 /bin/bash<br></code></pre></td></tr></table></figure></li><li><p>设置openwrt容器的IP地址，vi /etc/config/network,N1拨号下面的user改你的宽带账号，password改你的宽带密码。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">config interface &#x27;loopback&#x27;<br> option ifname &#x27;lo&#x27;<br> option proto &#x27;static&#x27;<br> option ipaddr &#x27;127.0.0.1&#x27;<br> option netmask &#x27;255.0.0.0&#x27;<br> config interface &#x27;lan&#x27;<br> option ifname &#x27;eth0&#x27;<br> option proto &#x27;static&#x27;<br> option netmask &#x27;255.255.255.0&#x27;<br> option ipaddr &#x27;192.168.1.1&#x27;<br> option gateway &#x27;192.168.1.1&#x27;<br> option dns &#x27;223.6.6.6 119.29.29.29 114.114.114.114 180.76.76.76&#x27;<br> <br> config interface &#x27;wan&#x27;<br> option ifname &#x27;eth0&#x27;<br> option username &#x27;user&#x27;<br> option password &#x27;password&#x27;<br> option ipv6 &#x27;auto&#x27;<br> option metric &#x27;40&#x27;<br> option proto &#x27;pppoe&#x27;<br> option delegate &#x27;0&#x27;<br></code></pre></td></tr></table></figure></li><li><p>设置防火墙，</p> <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">vi <span class="hljs-string">/etc/firewall.user</span><br>iptables -t nat -A PREROUTING -p udp <span class="hljs-params">--dport</span> 53 -j REDIRECT <span class="hljs-params">--to-ports</span> 53<br>iptables -t nat -A PREROUTING -p tcp <span class="hljs-params">--dport</span> 53 -j REDIRECT <span class="hljs-params">--to-ports</span> 53<br>iptables -t nat -I POSTROUTING -o pppoe-wan -j MASQUERADE<br></code></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h4 id="Pihole-配置"><a href="#Pihole-配置" class="headerlink" title="Pihole 配置"></a><span id="h4">Pihole 配置</span></h4><p>​    设置dns服务器#端口</p><ul><li><p>浏览器打开192.168.1.5，登录后台。</p></li><li><p>DNS中自定义设置为192.168.1.1#6053，这个ip和端口对应openwrt的ip和smartdns设置的端口。</p><p><img src="/2020/12/14/N1-docker/1.png"></p></li></ul><h4 id="smartdns-配置"><a href="#smartdns-配置" class="headerlink" title="smartdns 配置"></a>smartdns 配置</h4><ol><li><p>局域网内DNS解析流程，分主路和备用两条DNS解析，并且两条dns线路独立，smartdns不做dnsmasq的上游服务器。主DNS出现问题时，备用DNS自动生效。</p><ul><li>局域网主DNS解析流量：设备(手机、电脑等)–&gt;PiHole(192.168.1.5)–&gt;smartdns(192.168.1.1#6053)<ul><li>smartdns会返回最快的解析结果</li><li> smartdns添加上游服务器，注意不要添加国外dns服务器，只添加国内dns服务器，如阿里云dns服务器(223.6.6.6)</li><li>另外添加本地dns(127.0.0.1),本地dns非常重要，如果不添加这条，当解析国外域名时，解析出来的ip是对于运营商ip响应最快的ip地址，例如<a href="www.google.com">www.google.com</a> 解析出来的对于本地运营商最快的ip地址(172.217.160.78美国IP)，当实际访问网站时：本地运营商–&gt;SSR服务器(HK)—&gt;目标IP(172.217.160.78美国IP),SSR服务器到目标IP的速度并不是最快的，影响访问速度。如果添加上本地dns：那么当解析国外域名时，SSR会根据vps对于目标网站解析出响应最快的ip地址(172.217.24.196香港IP)。当实际访问网站时：本地运营商–&gt;SSR服务器(HK)—&gt;目标IP(172.217.24.196香港IP)，此时访问速度会比较快。</li></ul></li><li>局域网备用DNS解析流量：设备(手机、电脑等)–&gt;openwrt(192.168.1.1#53)<ul><li>主DNS失效或出错时，备用DNS会自动生效</li><li>备用DNS就是原本的dns，因为smartdns并没有做dnsmasq的上游服务器，因此即便smartdns出问题时，备用dns也不会受任何影响。</li><li>备用DNS国外流量自动走SSR,国内流量不走SSR。</li></ul></li></ul></li><li><p>局域网内DHCP自动分配给设备主用、备用两条DNS记录<br> 192.168.1.5为主DNS，192.168.1.1为备用DNS。</p><p> <img src="/2020/12/14/N1-docker/2.png"></p></li><li><p>smartdns配置截图及其他配置图</p><p> 只修改基本设置和上游服务器，其他地方不做修改<br> SSR不修改，不做DNS转发器</p><p> <img src="/2020/12/14/N1-docker/3.png"><br> <img src="/2020/12/14/N1-docker/4.png"><br> <img src="/2020/12/14/N1-docker/5.png"></p></li><li><p>smartdns配置结果测试</p></li></ol><p>1.主用、备用DNS国内流量解析结果<br>   <img src="/2020/12/14/N1-docker/6.png"><br>2.主用、备用DNS国外流量解析结果<br>   <img src="/2020/12/14/N1-docker/7.png"></p><h4 id="硬件设备"><a href="#硬件设备" class="headerlink" title="硬件设备"></a><span id="6">硬件设备</span></h4><p>​    设备：斐讯N1、水星千兆交换机、移动光猫、腾达AC23<br>​    斐讯N1：armbian、openwrt、pihole<br>​    移动光猫：桥接<br>​    腾达AC23：AP<br>​    路由连接方式：光猫lan口连接交换机、斐讯N1连接交换机、腾达AC23的wan口连接交换机。<br>​    注意事项：所有设备都在同一个网段<br>​    openwrt：192.168.1.1<br>​    armbian：192.168.1.3<br>​    pihole：192.168.1.5<br>​    腾达AC23：192.168.1.6<br>​    光猫：192.168.1.2（光猫设置静态IP，并关闭DHCP）</p>]]></content>
    
    
    <categories>
      
      <category>软路由</category>
      
    </categories>
    
    
    <tags>
      
      <tag>N1</tag>
      
      <tag>斐讯</tag>
      
      <tag>软路由</tag>
      
      <tag>openwrt</tag>
      
      <tag>smartdns</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo本地图片问题</title>
    <link href="/2020/12/13/Hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/"/>
    <url>/2020/12/13/Hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>Hexo引用显示本地图片<br>使用Hexo的同学都知道，Hexo的博客使用本地图片真的是非常麻烦，经常显示不出来，虽然本站最开始都固定死位置的，即本地位置和上传到服务器后位置不一样，文档里面地址适配具体位置，时间长了根目录下面的图片文件夹图片越来越多，也不好管理。鉴于博客本身生成后产生了一个目录，应该是可以使用的。</p><p>使用的问题<br>先简单说下Hexo博客图片的问题，当我们写博客的时候，如果不是绝对的网址方式，如图床等方式，那么我们在引用本地图片的时候，对应的代码大概如此</p><p><img src="/2020/12/13/Hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/xxx.png" alt="comment"><br>但是这个图片经过Hexo生成之后，并不会将图片拷贝到最终目录，而且如果图片没有一定的存放规则，最终会非常难管理。</p><p>解决方案<br>首先参考了官网 <a href="https://hexo.io/zh-cn/docs/asset-folders.html">https://hexo.io/zh-cn/docs/asset-folders.html</a></p><p>里面有解决方案，但是这种不是markdown的语法的东西非常恶心，弃之。</p><p>继续搜索，发现 hexo-asset-image 这个插件是实现这个功能的，那么直接通过NPM安装这个插件，总结一下，首先启用资源拷贝功能，在 _config.yml 中，修改</p><p>post_asset_folder: true<br>然后在使用的时候，首先需要通过 hexo n xxx 创建新博客的时候，会创建同名 xxx 的目录，相关的资源文件放里面即可，当然这个目录也可以手动创建，最终大概目录结构如下</p><p>./test.md<br>./test/<br>./test/bg.png<br>在博客中引用的时候，就按正常的引用方式引用即可，如</p><p><img src="/2020/12/13/Hexo%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/bg.png"><br>但是直接这么实现，我发现并没有成功，然后参考 <a href="https://www.jianshu.com/p/3db6a61d3782">https://www.jianshu.com/p/3db6a61d3782</a></p><p>原来是兼容性问题，卸载刚安装的插件，安装参考中作者的修改版本</p><p>npm uninstall hexo-asset-image<br>npm install <a href="https://github.com/7ym0n/hexo-asset-image">https://github.com/7ym0n/hexo-asset-image</a> –save<br>hexo clean &amp;&amp; hexo g<br>然后基本OK了，然后F12查看了地址，虽然可以访问了，但是地址却是带域名方式的，通用性不好，查看了作者的实现逻辑，确认是字符串切割问题，然后在 _config.yml 中修改网站地址从 <a href="https://xilixili.net/">https://xilixili.net</a> 修改为 xilixili.net，不带 http(s) 头，重新生成就好了。</p><p>转载自<a href="https://www.xilixili.net/2019/03/26/hexo-markdown-use-images/">这里</a></p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黑群实操</title>
    <link href="/2020/12/13/%E9%BB%91%E7%BE%A4%E5%AE%9E%E6%93%8D/"/>
    <url>/2020/12/13/%E9%BB%91%E7%BE%A4%E5%AE%9E%E6%93%8D/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码" /><label>您好, 这里需要密码</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="3e6ba684ea99665d1473b8c7827530f7de29a284d22a9a0cfb17bc0a2f542264"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
      <tag>群晖</tag>
      
      <tag>黑群</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>N1小钢炮固件安装</title>
    <link href="/2020/12/11/N1/"/>
    <url>/2020/12/11/N1/</url>
    
    <content type="html"><![CDATA[<p>Nano Disk Manager (NanoDM)</p><h1 id="N1-PT下载小钢炮固件安装说明"><a href="#N1-PT下载小钢炮固件安装说明" class="headerlink" title="N1 PT下载小钢炮固件安装说明"></a>N1 PT下载小钢炮固件安装说明</h1><p>本说明最后由 荒野无灯 于 2019-04-24 17:38 编辑</p><p>公测版由于功能尚未最终稳定。因此，更新会比较频繁。</p><p>强烈建议使用0411之后的版本, 不要再去下载0909版本了….</p><p>0909版本的任何问题或bug都不予处理.</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>缓存问题 (此问题仅存在于0909及之前的老固件):</p><p>如果你进某个页面总是跳回登录页面,或者直接没有显示任何东西 ，浏览器返回的是该页无法显示。</p><p>chrome浏览器缓存问题。 ctrl + shift + i , 然后右击浏览器顶部地址栏的刷新按钮，</p><p>选择第三项：“清空缓存并硬性重新加载”， 即可。</p><p>更多FAQ见： <a href="https://gitee.com/8ox86/phicomm-n1-issue">https://gitee.com/8ox86/phicomm-n1-issue</a></p><p>====================================================================================</p><h2 id="从n1原版android系统刷机操作步骤"><a href="#从n1原版android系统刷机操作步骤" class="headerlink" title="从n1原版android系统刷机操作步骤"></a>从n1原版android系统刷机操作步骤</h2><p>1.有一个N1,准备个U盘. 不要太大，U盘大于512M即可. usb 2.0的最佳。</p><p>闪迪（SanDisk）酷豆（CZ33）16GB 或 8GB的测试通过，表现良好。lexar 8GB USB2.0 U盘表现更佳。</p><p>经测试，上次撸的台电（Teclast）锋芒 U盘 64G USB3.0很大概率上识别会有问题。</p><ol><li>下载 phicomm-n1-s905-linux-hacklog-20190327-0136.img.7z , 用7z或winrar解压后,再校验img文件的md5.</li></ol><p>注意校验md5 phicomm-n1-s905-linux-hacklog-20190327-0136.md5sum.txt</p><ol><li>将镜像文件 phicomm-n1-s905-linux-hacklog-20190327-0136.img 通过工具写入U盘</li></ol><p>(windows下可用<code>USB Image Tool</code>或etcher[<a href="https://etcher.io]%2C/">https://etcher.io]，</a> linux gnome3环境下可直接用Disks工具写入)</p><p><strong>关于img写入</strong></p><p>推荐使用<a href="http://rom.nanodm.net/N1/tool/usb-image-tool.zip">usb-image-tool</a> 写入 其它工具没有测试过.不保证其工作正常. 如果你下载的是一个.xz的文件,请解压出 .img文件出来,并校对 .img文件的md值. 然后再行写入. 写入方法详细步骤: <a href="http://rom.nanodm.net/N1/%E8%8D%92%E9%87%8E%E6%97%A0%E7%81%AFN1%E5%9B%BA%E4%BB%B6img%E5%86%99%E5%85%A5%E6%95%99%E7%A8%8Bfor%20windows%20users.zip">荒野无灯N1固件img写入教程for windows users.zip</a></p><p>U盘写好后，先别插入！ U盘写好后，先别插入！ U盘写好后，先别插入！</p><ol><li>N1插上网线连接到路由器（路由器要支持DHCP）,N1开机，打开adb远程调试.</li></ol><p>(关于如何打开adb，这里我说明一下，接显示器和鼠标，进入原装的N1系统，然后点击版本号4次，提示adb已经打开即可。这个时候，即使你断电，下次开机，会也是adb已经开启的状态。)</p><p>N1成功获取到IP后，在路由器Client Status你可以看到类似android-a08558xxxx这种名称的机器.</p><ol><li>N1通过adb连接n1，这里假设我们获取到的N1的IP为: 192.168.8.201, 在电脑端执行命令：</li></ol><p><code>adb connect 192.168.8.201</code> (这里为盒子的IP）,连接成功后你会看到提示： <code>connected to 192.168.6.201:5555</code></p><p>这一步如果没有连接成功,你后面的不用看了…</p><ol><li><p>前提：必须保证第5步你adb连接成功了！(这时可连接显示器看效果,但不是必须的),输入:</p><p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell<br></code></pre></td></tr></table></figure></p></li></ol><p>确保已经进入android的shell,成功进入的标记是，命令提示符会变成： <code>p230:/ $</code> 然后手里准备好U盘，再执行：<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">   reboot update<br></code></pre></td></tr></table></figure><br>此时，迅速插上U盘到离HDMI口最近的那个位置。只插一个U盘,不要插其它多余的USB…</p><p>如果命令执行成功,且你的U盘是做好的,那么,会自动进入linux系统(没错,我还没想好名字,先叫linux吧),</p><p>然后你如果接了显示器的话,应该是始终黑屏的. 反之,如果不是黑屏,而是进入了盒子系统的画面,</p><p>或者进入了盒子的recovery界面,</p><p>说明你的U盘做得有问题,换U盘,或者检查自己制作启动盘的过程是不是存在问题.</p><ol><li>进入老毛子路由器，打开Client Status（客户端状态）列表，点击刷新。等待N1启动后获取IP, 你会看到一个名为phicomm-n1的机器，</li></ol><p>N1 的mac 开头是 <code>FC7C02</code> 的。</p><p>这里假设N1的IP为: <code>192.168.8.201</code>， 后续的说明以这个假设为基础。</p><p>启动大概需要两三分钟。</p><ol><li>安装到内置emmc: 通过浏览器打开 http://192.168.8.201:8086/ ，即可看到安装界面。</li></ol><p>然后,点击<code>start install</code>按钮即可开始自动安装。</p><p>如果有看到<code>socket ignored</code>的错误,不用管.其它操作成功就行.</p><p>最后显示：<code>Complete copy OS to eMMC parted SYSTEM</code> 即表示安装过程已经完成。此时，</p><p>可气沉丹田，蛋定，然后，断掉N1电源, 拔掉U盘。</p><p>再上电开机即可。</p><ol><li>静静地等待启动。大概两三分钟吧。</li></ol><p>查看IP可以用上面提到的”Client Status（客户端状态）列表“ 法。 （也可以用ping，一般是没必要的。）</p><ol><li>打开登录页面后，务必清空chrome浏览器缓存。</li></ol><p>ctrl + shift + i , 然后右击浏览器顶部地址栏的刷新按钮，</p><p>选择第三项：“清空缓存并硬性重新加载”， 即可。</p><p>此操作在更新完系统或更新完dashboard后务必执行一次。</p><ol><li><p>如何判断刷机是正常的？登录dashbaord后，最多等待2分钟时间,然后：</p><p>依次点击左侧菜单的apps下面的菜单：</p></li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-attr">qBittorrent:</span> 绿色Running<br><span class="hljs-attr">Transmission:</span> 绿色Running<br><span class="hljs-attr">Aria2:</span> 绿色Running<br><span class="hljs-attr">Samba:</span> 绿色Running<br><span class="hljs-attr">FRP:</span> 绿色Running<br>ftp <span class="hljs-attr">server:</span> 绿色Running<br><span class="hljs-attr">filemanager:</span> 绿色Running<br><span class="hljs-attr">syncthing:</span> 绿色Running<br><span class="hljs-attr">qBittorrent:</span> 绿色Running<br><span class="hljs-attr">Transmission:</span> 绿色Running<br><span class="hljs-attr">Aria2:</span> 绿色Running<br><span class="hljs-attr">Samba:</span> 绿色Running<br><span class="hljs-attr">FRP:</span> 绿色Running<br>ftp <span class="hljs-attr">server:</span> 绿色Running<br><span class="hljs-attr">filemanager:</span> 绿色Running<br><span class="hljs-attr">syncthing:</span> 绿色Running<br></code></pre></td></tr></table></figure><p>   如果所有服务不是全绿的状态。说明刷机是有问题的。</p><p>   可以重新写盘，再刷一次。这时不必按这个步骤来了，</p><p>   而是参照下面的”从本固件旧版系统刷机操作步骤“</p><p>   jellyfin和docker默认没有自启动，因此是stopped 状态, 这是正常的.</p><ol start="2"><li>刷机完成后，重启一次。</li></ol><p>====================================================================================</p><h2 id="从本固件旧版系统刷机操作步骤"><a href="#从本固件旧版系统刷机操作步骤" class="headerlink" title="从本固件旧版系统刷机操作步骤"></a>从本固件旧版系统刷机操作步骤</h2><ol><li>配置备份 (具体方法见下面的”配置的备份和恢复”)</li><li>下载img文件写入U盘</li><li>关机，插入U盘，上电， 等待从U盘启动</li><li>通过浏览器打开 <a href="http://192.168.8.201:8086/">http://192.168.8.201:8086/</a> ，安装固件到emmc.(注意，此步骤会自动擦除原系统的所有数据，如果你有配置文件要备份的，请注意备份)</li><li>安装过程成功完成后，气沉丹田，蛋定，然后，断掉N1电源, 拔掉U盘。再上电开机即可。</li><li>配置恢复 (具体方法见下面的”配置的备份和恢复”)</li><li>配置恢复后，重启一次。</li></ol><p>====================================================================================</p><h2 id="FAQ2"><a href="#FAQ2" class="headerlink" title="FAQ2"></a>FAQ2</h2><p>为什么我刷机成功了，qb 或 tr 等还是黄色？</p><p>这不是成功，这是刷机失败的标志。</p><p>写盘有问题。权限问题导致qb没能启动，从而dashboard读取不到qb的配置而启动失败。 重新写盘吧。写完之后，别动！赶紧拔出来。</p><p>过早的插入U盘，或者，在U盘做好后，插入到android系统的盒子里后，会污染U盘，导致权限不正确，从而， 刷机之后很多文件权限不对。</p><p>更多FAQ见：<a href="https://gitee.com/8ox86/phicomm-n1-issue">https://gitee.com/8ox86/phicomm-n1-issue</a></p><h2 id="配置的备份和恢复"><a href="#配置的备份和恢复" class="headerlink" title="配置的备份和恢复"></a>配置的备份和恢复</h2><p>====================================================================================</p><p>说明： 这里的sda1, sdb1 指的是设备名称，不是挂载点. 如指定 sdb1,则表示使用的是 /dev/sdb1 这个设备.</p><p><strong>备份</strong>：</p><p>确保有且仅有一个ext4 分区的可写的硬盘已经挂在N1上，</p><p>（PT用户注意：执行以下命令会关闭所有daemon, 因此，确保qb 你已经在web ui手动点击暂停了所有种子。要不然会红种。。。）</p><p>然后执行</p>   <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">cfg-backup</span><br><br></code></pre></td></tr></table></figure><p>（如果你连接了两个以上的硬盘，比如你想指定备份到 sda1 这个设备，那么可以这样：cfg-backup sda1)</p><p>刷完机之后，从备份恢复：</p><p>确保前面备份用的那个ext4 分区的硬盘已经挂在N1上，确保有且仅有一个USB设备挂在N1上面，</p><p>然后执行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">cfg-recovery</span><br></code></pre></td></tr></table></figure><p>默认不加参数执行，是备份到sda1这个分区，恢复也是.</p><p>（如果你有多个分区或硬盘，也可以在后面加参数，比如想从sdb1恢复，则执行 cfg-recovery sdb1）</p><p>====================================================================================</p><h2 id="默认用户名密码、访问URL及端口说明"><a href="#默认用户名密码、访问URL及端口说明" class="headerlink" title="默认用户名密码、访问URL及端口说明"></a>默认用户名密码、访问URL及端口说明</h2><hr><p>假设N1的IP为: 192.168.8.201</p><hr><p>dashboard登录地址为： <code>http://192.168.8.201</code></p><p>默认用户名：<code>root</code> 密码： <code>root</code></p><p>其它信息:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><br>ssh 默认 端口 <span class="hljs-number">22</span>, 用户<span class="hljs-built_in">名root</span>, 密<span class="hljs-built_in">码root</span><br>ftp 默认 端口 <span class="hljs-number">21</span>, 用户<span class="hljs-built_in">名root</span>, 密<span class="hljs-built_in">码root</span><br>ssh 默认 端口 <span class="hljs-number">22</span>, 用户<span class="hljs-built_in">名root</span>, 密<span class="hljs-built_in">码root</span><br>ftp 默认 端口 <span class="hljs-number">21</span>, 用户<span class="hljs-built_in">名root</span>, 密<span class="hljs-built_in">码root</span><br><br><br></code></pre></td></tr></table></figure><hr><hr><p>如果多次写盘（正确的工具，正确的操作）仍没能成功进入web ui，</p><p>请检测是否降级，或者操作是否有问题。</p><p>降级可以参考：<a href="https://gitee.com/8ox86/phicomm-n1-issue/blob/master/downgrade-n1.md">v2.27 , v2.28 降级教程</a></p><p>如果多次写盘（正确的工具，正确的操作）仍没能成功”全绿“，</p><p>请仔细再看看这个文档，是不是有什么步骤没按说明来。</p><hr><hr><p>！！！ 特别提醒 ！！！</p><p>使用qb, aria, tr 等下载器时，自己一定要设置下载目录为外接磁盘！</p><p>不要用默认的路径就开始下载东西！</p><hr><hr><p>默认开机自动走有线网口dhcp获取IP,</p><p>如果你的路由器没开dhcp, 那么,</p><p>会自动退回到原厂设定的固定IP: 192.168.8.88</p><hr><p>qb 默认web ui: <code>http://192.168.8.201:8083/</code></p><p>默认用户名: <code>admin</code></p><p>默认密码: <code>adminadmin</code></p><hr><p>tr 默认web地址: <code>http://192.168.8.201:9091/</code></p><p>第一次用,注意在dashboard设置 <a href="http://192.168.8.201/appcfg/transmission">http://192.168.8.201/appcfg/transmission</a></p><p>默认用户名: <code>admin</code></p><p>默认密码: 自己设置</p><p>默认局域网内是不需要密码就能访问的，如果需要密码认证的，自己修改配置:</p><p><code>rpc-authentication-required</code> <code>true</code></p><hr><p>filebrowser web 地址: <code>https://192.168.8.201:8081/</code></p><p>默认用户名: <code>admin</code></p><p>默认密码: <code>admin</code></p><hr><p>Syncthing web 地址: <code>http://192.168.8.201:8384/</code></p><p>默认用户名: 无</p><p>默认密码: 无</p><p>设置web ui用户:</p><p>右上角依次点击: 操作=&gt; 设置 =&gt; 图形用户界面 , 填写 ‘图形管理界面用户名’ 和 ‘图形管理界面密码’, 保存.</p><hr><p>aria2 web 地址: <code>http://192.168.8.201/apps/AriaNg</code></p><hr><p>smb 需要进 <code>http://192.168.8.201/appcfg/smb-share</code> 设置共享目录.</p><p>硬盘默认会挂载到 <code>/media/xxxx</code> , 因此打路径时你只要打 <code>/media/</code> 就会自动提示.</p><p>如果不是两个全绿的运行状态,在你配置好的情况下,</p><p>在主配置页面 <code>http://192.168.8.108/appcfg/smb</code> 点一下save就会重启smb变绿.</p><p><strong>关于smb的用户配置说明</strong>:</p><p>这原本是你应该看smb的文档手册解决的问题,因为这些理念和约定,是smb程序设定的.</p><p>如果你不了解这个,那你配置上可能会有麻烦.</p><ol><li>里面有一个名字叫root的用户,这个是最高权限级别的.拥有对任何文件的操作权限. 它的smb密码,跟你登录ssh的root用户的密码,是分开的,是两回事.</li><li>smb里可以新建其它用户和共享.可以分配不同的权限,给不同的目录.</li></ol><p>以默认的设置举例说明（注意这里的root和admin用户之间有一个英文空格，这里的admin用户是自己新建另外一个用户）:</p><table><thead><tr><th align="center">Name</th><th align="center">Comment</th><th align="center">Path</th><th align="center">Writeable</th><th align="center">Valid Users</th><th align="center">Invalid Users</th><th align="center">Read list</th><th align="center">Write List</th></tr></thead><tbody><tr><td align="center">share</td><td align="center">share</td><td align="center">/media/my-movie</td><td align="center">no</td><td align="center">root admin</td><td align="center"></td><td align="center">root admin</td><td align="center">root admin</td></tr></tbody></table><p><code>Name</code>表示出现在客户端访问里的名字, 如你可以改成myshare.<strong>注意这个必须是唯一的!也就是说你不能弄两个相同的Name!</strong></p><p><code>Comment</code> 只是个注释,提醒自己用的,让自己别忘记设置这个目录是干嘛的</p><p><code>Path</code> 表示要共享的目录的绝对路径. 一定要是真实存在的路径.</p><p><code>Writeable no</code> 表示默认是不给写权限的</p><p><code>Valid Users</code> 表示这个共享允许哪些用户. 相反,</p><p><code>Invalid Users</code>则表示不允许的.</p><p><code>Read List</code> 为可读用户列表</p><p><code>Write List</code> 为可写用户列表.</p><p>看完这些说明,你应该明白了默认的那个设置,为什么是那样的了.</p><hr><p>frp 需要进 <a href="http://192.168.8.201/appcfg/frp">http://192.168.8.201/appcfg/frp</a> 配置<code>Server Addr</code>和 <code>Auth Token</code>等. 如果没有服务端,可用一键部署工具: <a href="https://frps-deploy.80x86.io/">https://frps-deploy.80x86.io</a> 快捷安装.</p><p><code>Subdomain/CustomDomain</code> 字段是自适应的。</p><p>如果填写的是 abc 之类的，则是<code>Subdomain</code>. 如果你填写的是 <code>a.b.c</code>之类的(比如 foo.t.example.com)，</p><p>则会自动识别为<code>CustomDomain</code>,</p><p>具体填写什么根据你的服务器配置来。</p><p>大部分免费服务器不支持<code>Subdomain</code>。</p><p>如果你是用我的自动部署工具安装的frps，那么默认是支持Subdomain的.</p><hr><p>root密码可进 <a href="http://192.168.8.201/admin/system/admin">http://192.168.8.201/admin/system/admin</a> 修改,同时可以在这里加自己的公钥证书,实现免密码登录ssh.</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软路由</category>
      
    </categories>
    
    
    <tags>
      
      <tag>N1</tag>
      
      <tag>斐讯</tag>
      
      <tag>软路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/12/11/hello-world/"/>
    <url>/2020/12/11/hello-world/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="密码错误, 请再试试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="您好, 这里需要密码" /><label>您好, 这里需要密码</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="9dc9d297a5b1105ecfa4b9539c330bc6b79cc49972869a315c466f33986ce365">fe6387f4031561f5d0681acda8830f3c774cbfabe75a344b55b8dfde5873de884d3458f3302e414d2f3a3c2a0a600c43a5049ceeb4b879c8b070abcc8029c0b8e296919c57171e7f03b81469a6091395e72aa1de3395c63423631ba1a4d0d9a254ad79efba5b429f31fb29004e9039e5f803cc0f430dfa504fbcbcc184cfc32e85a2be4ba9403cf474ad6ba7f6af6dcdd6a4962cf6ce837b950caa19f3d7503096f1bd87def81905b24b4fef8ea414d564a1c04d82927337f54942a09137df812dc971a014dba3d0417d88f162f4fb7d77a8570f874008536141406b1d50d96ae9974d706470fa1197571fde78508cef4b2dd1fddd2fb973142eeb5afc959e46962ec42eff5b0af0d3b363b29ee6cf0fe18ff743eec98d7d19b8451a9c37c2b02a2c7fc0cf3cc168ce68f84b93e87afd909a6945348be088ab7dbc19ca826f5e2a9b4e45d718b634f9b5dfeebf437bc4052a68e49004141dc3482544e4eeed1c4f0c23797a8e48b26709f76568ca16539b0a671b72f64106f30e94c8d58ae3e19afdd94ea729cf39908556e2f7f7bf4e203ea4e44ef85e0031bc84415d38cf41edfd8150bca81a41979eb00116978f39e3166d4af4abe4055e90498c75a17afbb80ef03b9a306e992689b1874dfcc5eff53c78118ef84101b0cae606c3054eebf2bec57bf211399afbdb81c9a61b6d8e4f9f42eea0fdef2f505e504e5af60b7d673e14eace8581be77e26a426cc335e352567a021416bda7ec4ef3192846a953ff058de5997ba40f5887e5f4310e2ae788a6195072d2472b111d65d62bce762cd75922bbda548f95c4acf6d4a8214a7dc795d786a165765755d031775a0d706ec5700d4fb3c125a777421a71d1d9babc09f877283d688d38498ee926d61cc453007403914c3a210da8513830b8aa5b236a564afc3e07224e95091650b614d145b1e347fd228a82a10188619d11f7515a0e677951c3cb6fcc50eeb8f75465a6efc7d81a5c290a49f808df602d0c48e5a50c7729b1d00d2b4e4b70151bd7599c8e50418388bc5478d3e288a4794c3c1b0fb926e45a73d935767009c91cb16817496ea5e2501679567425352a05ff5e222949a50c85a104e2aea871b5a776dc8c18edb2ebbf1b24761e423341b67fdf2b8ae74191eaea971a883b5e2c76a8abad2f7464c4a0a3b2a824e7d31cb081d9a58d5cd93c42e77b0730e032f509a006b3603d1b5ed1e89328a97c511e296ef354daa8550dd83b14728b10136da5c49d2fced4f9f4255b24ae64ad352905f1a8c09f36f4d58cda7556ec5e72fc147be8a8d4c006596ce4c45757f5e8adb53983acc983f8c578ab018c683a7abfcb8c81c7d2dc12b8b7a82d2a3d4ed5340e790e1792107732495e738a9d5f5ff918ccf3e43dd50521f44c73c22008ae6487680b8a2b4fd147f6c37772bdb0bb157a927982168ffe1fa5b72aff51881f43b2a15b7038ef5a10a3bd5b9c5de97aec13a19a8a1e41dccc139830803280c7b5ccaf9f00148e8cc07d6bf663c0108df0f2a3cf8ec5fdf157996791a5faf059c1d5053dfa392e6cc203f704d03ac76422d22806600bb407ab897aef7f194e32e6b3300d5e1d450e1c8649956d4b1b71e12a8551a75c46adc8e30e61e7a3f51c96e19531cea186aac885545d496382069b77c6840668b4cdb3ac220e03dc64e3bbb45e47f5eef33bebf7b265d8330f70dd231a74259324c13c6db948e74b568765bb107ca7b8aea173639c2a7979c9dd5b593e347228534c8836dbc14a7126932d3057d56a2b8079fdb5612c3afd5a6a859b38d79e90378264aa69bc3c7ec34c19ac7c503c7763b9ac42a7f3bd000123e2d18a36d5f40a72bdb58c197feaac9c743aac8d7f5987f044d99017f23dd41fd2c6f3918cb45409a32e5d0ae530a25f468a35adb8820a1a8fefb2bbdf845c65892067d1545618a960954f016ab291901fd9898461ffde28aff90f4375506b3327c9c0b06a56f128faf058256869e3e552e9d6c8aa9c2520a66bbd9895548825843a6bd392edd1e8568fd82b4b48ad22aba0609469746e8b04d316ae9eb30b4ec514cac5c5bd43614f3a4590b909816f095b929739722abd489d439a6c9f775f0e4bb8db530700c2fdf57589d51d1c3286df86db967335fa3ba15e38d1df693b98365528ce1ba574dec829b935db3cd3adaef4f47389eacbcbc4bb8d333467f6f24be309b3a1b1d30270c0f3d8892950d124a5118c2dbf9fc6365da665fe31588a5e4cc0fdc338f3c5f6064437f0263033258ea5007ab64c551611ba033c80010aed081ec6bf081d9a4d62116776931972a0f18561d58ca4b03f15580ffd017364a8107ab5a111900bf7e2644dcc9581acc8fad100715a91a2ee5c8abdcf777b8c3b7db682f8c4b106b3668d74f54c5840d1baf7d2da975d00f04ef765fa31732d64cf1af96a9f1b559ab53ac2c1b38334e11ba460bbd67c8ffc44402316e2bae02a6d4ea563e5eb751a6adaab75487df9828c46458675fe197892ad93eb527fbea7bcef6e59fff914fee41bc3447210c991e8711cdde0103c08787f761bf39bee2a88af28d527b31b3876692d3bb724df7f5a1a5be2b8ba280ffff5fe58607a531a8ffc21f5feeda3549a5e7367077fba1b8171d343ad8f4808239ba7e15565656f08f2263b70c3c7da5817efbbcc134c7258087e2fbbbac405335268032c70fc3b821812535b7c7a9cc2347989c1251a67c37207fa98907e12ace18d61d1824fd9d2a98a2a36f63028203a659bac1aed7ecf2f74e14530b6cc50f419393c659050f64a52c9e093d6619ee98c2b455451ba20261eaaca6dc463790dd79936ede3ad3c8ffc10e6fe72b78b4ee57401594e3a35ac4fde3732eecb5ed06e1f66eef5c6459cfa69c60328f4054853c0d7f4cbe00c33398295496c93177947c2cb351d5c598ed0333b845fc0db9893ee8e0126f9907b5a7e9753e8fcad81716d3a135eaf8d0efe45b9d8b6e81d75af045cbc6d098cadad6f88a2e7eeb1a14a3b058d5f3a8760bf2deac2feb1902e631a83059d5f56407d49f75a9d44fa08895965ea123c0aebcb48e360005d87e9d34da60e0847cae38ac956fd8e30b97d1afbc7fb7814ee3ef16c15897812198bf79033c84e95c06ac03081dee836c5ef583e49edd290fb6dbc6d20ced7ac74001fcc85ae72b03e69db5c</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>N1降级</title>
    <link href="/2020/12/11/n1%E9%99%8D%E7%BA%A7/"/>
    <url>/2020/12/11/n1%E9%99%8D%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<hr><p>v2.27 , v2.28 降级：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">└─[$] &lt;&gt; adb connect 192.168.8.146      <br>* daemon not running; starting now at tcp:5037<br>* daemon started successfully<br>connected to 192.168.8.146:5555<br></code></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">└─[$] &lt;&gt; adb shell<br>p230:/ $ reboot fastboot<br></code></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">└─[$] &lt;&gt; fastboot devices -l<br>CAQDBXXXXK0XXXX        fastboot usb:1-3<br></code></pre></td></tr></table></figure><blockquote><p>fastboot flash bootloader bootloader.img</p></blockquote><blockquote><p>fastboot flash boot boot.img</p></blockquote><blockquote><p>fastboot flash recovery recovery.img</p></blockquote> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">└─[$] &lt;&gt; fastboot flash bootloader bootloader.img<br>target reported max download size of 1524629504 bytes<br>sending &#x27;bootloader&#x27; (656 KB)...<br>OKAY [  0.039s]<br>writing &#x27;bootloader&#x27;...<br>OKAY [  0.059s]<br>finished. total time: 0.097s<br>┌─[hacklog@arch_huangye] - [~/Downloads/N1_V2.19_imgs] - [Thu Sep 06, 19:10]<br>└─[$] &lt;&gt; fastboot flash boot boot.img<br>target reported max download size of 1524629504 bytes<br>sending &#x27;boot&#x27; (13858 KB)...<br>OKAY [  0.639s]<br>writing &#x27;boot&#x27;...<br>OKAY [  0.725s]<br>finished. total time: 1.363s<br>┌─[hacklog@arch_huangye] - [~/Downloads/N1_V2.19_imgs] - [Thu Sep 06, 19:10]<br>└─[$] &lt;&gt; fastboot flash recovery recovery.img<br>target reported max download size of 1524629504 bytes<br>sending &#x27;recovery&#x27; (17866 KB)...<br>OKAY [  0.820s]<br>writing &#x27;recovery&#x27;...<br>OKAY [  0.916s]<br>finished. total time: 1.736s<br></code></pre></td></tr></table></figure><p> 气沉丹田，断电.</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">└─[$] &lt;&gt; adb connect 192.168.8.146<br>connected to 192.168.8.146:5555<br></code></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">└─[$] &lt;&gt; adb shell<br>p230:/ $ reboot update<br></code></pre></td></tr></table></figure><p> 开始从USB刷 Linux</p>]]></content>
    
    
    <categories>
      
      <category>软路由</category>
      
    </categories>
    
    
    <tags>
      
      <tag>N1</tag>
      
      <tag>斐讯</tag>
      
      <tag>软路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习</title>
    <link href="/2020/12/11/python%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/12/11/python%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="python学习"><a href="#python学习" class="headerlink" title="python学习"></a>python学习</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>windows安装，需要注意在安装过程中勾选”add to path”，不然后基命令要带路径，或手动添加</p></li><li><p>升级pip，在安装pandas库时，会提示pip版本过低，需要先升级，升级命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python -m pip install -U pip<br></code></pre></td></tr></table></figure></li><li><p>安装pandas库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install pandas<br></code></pre></td></tr></table></figure></li><li><p>装xlrd</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install xlrd<br></code></pre></td></tr></table></figure></li></ul><h2 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h2><h3 id="变量-variable"><a href="#变量-variable" class="headerlink" title="变量(variable)"></a>变量(variable)</h3><p>变量名自定，分大小，以字母或 _ 下划线开头，有一些名字是被保留的，比如“if”。</p><p>变量使用 = 号赋值，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">_variable = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4><h3 id="python数据类型"><a href="#python数据类型" class="headerlink" title="python数据类型"></a>python数据类型</h3><h4 id="数字（numbers"><a href="#数字（numbers" class="headerlink" title="数字（numbers)"></a>数字（numbers)</h4><p>int 整数（如：10，5，2）</p><p>float浮点数（带小数点，如：5.0，2.30）</p><h4 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串(string)"></a>字符串(string)</h4><p>零个或多个字符组成，以” “或’ ‘标识的就是字符串</p><p>建议单个字符用’ ‘，其它用” “</p><p>字符串可以使用+和*来拼接和重复</p><p>可以使用len函数查询字符长度。</p><p>可以使用字典 in 操作符查询字符是否存在于另一字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;hello world&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以使用find()函数查询字符串的索引值，python里第一个索引是0</p><p>可以使用split切片分隔，返回的是一个列表。</p><h4 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h4><p>以[ ]标识的一组对象</p><p>null_list  空列表</p><p>num_list  数列表</p><p>str_list 字符串列表</p><p>kinds_list 混合列表</p><p>可以使用+和*来拼接和重复。</p><p>可以使用[star_index:end_index]来获取指定位置的值。</p><p>可以使用append在列表尾附加对象或使用insert插入对象。</p><p>可以使用pop()删除指定位置的对象。</p><p>可以使用remove()删除指定值的对象。</p><p>可以使用count() 统计字符串里某个字符出现的次数。</p><p>可以使用index()查询对象在列表中的位置。</p><p>可以使用sort()对列表排序。</p><h4 id="字典-dictionary"><a href="#字典-dictionary" class="headerlink" title="字典(dictionary)"></a>字典(dictionary)</h4><p>以{ }标识的键值对</p><p>{key1:value1,key2:value2}</p><p>对象包括：key，value，item。键，值，键值对。</p><p>获取key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span>.keys()<br></code></pre></td></tr></table></figure><h4 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h4><p>元组与列表类似，但不能添加、删除和改变元组的元素</p><p>以( )标识的元素</p><p>可以用list()把元组转成列表</p><p>可以用tuple()把列表转成元组</p><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p>+     -    *   \ 和 %  **  //</p><p>加减乘除和取余、幂、取整除</p><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ul><li>== 等于</li><li>&gt;=大于等于</li><li>&lt;=小于等于</li><li>!=不等于</li></ul><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>and 与</p><p>or 或</p><p>not 非</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> xxx <span class="hljs-keyword">in</span> xxx<br>statements(s)<br></code></pre></td></tr></table></figure><p>for循环可以遍历任何序列的项目，如一个列表或者一个字符串。    </p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 判断条件(condition)：<br>    执行语句(statements)……<br></code></pre></td></tr></table></figure><p>判断条件为true则执行执行语句，为false则结束循环</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><ul><li><p>条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块</p></li><li><p>Python程序语言指定任何非0和非空（null）值为true，0 或者 null为false。</p></li><li><p>if 语句用于控制程序的执行，基本形式为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 判断条件：<br>    执行语句……<br><span class="hljs-keyword">else</span>：<br>    执行语句……<br></code></pre></td></tr></table></figure></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>可以重复使用的程序</p><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs flix"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">函数名</span></span>(参数名):<br></code></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h4><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><p>返回字符串、列表、字典、元组等长度语法：len(str)</p><h5 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h5><p>str：要计算的字符串、列表、字典、元组等</p><h5 id="返回值："><a href="#返回值：" class="headerlink" title="返回值："></a>返回值：</h5><p>字符串、列表、字典、元组等元素的长度</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>1、计算字符串的长度：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">&gt;&gt;&gt; s = &quot;hello word&quot;<br>&gt;&gt;&gt; len(s)<br>10<br></code></pre></td></tr></table></figure><p>2、计算列表的元素个数：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">&gt;&gt;&gt; str= [&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;]<br>&gt;&gt;&gt; len(str)<br>5<br></code></pre></td></tr></table></figure><p>3、计算字典的总长度(即键值对总数)：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">&gt;&gt;&gt; dict = &#123;&#x27;num&#x27;:777,&#x27;name&#x27;:&quot;anne&quot;&#125;<br>&gt;&gt;&gt; len(dict)<br>2<br></code></pre></td></tr></table></figure><p>4、计算元组元素个数：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">&gt;&gt;&gt; t = (&#x27;G&#x27;,&#x27;o&#x27;,&#x27;o&#x27;,&#x27;d&#x27;)<br>&gt;&gt;&gt; len(t)<br>4<br></code></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>find() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果包含子字符串返回开始的索引值，否则返回-1。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>find()方法语法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">str.<span class="hljs-builtin-name">find</span>(str, <span class="hljs-attribute">beg</span>=0, <span class="hljs-attribute">end</span>=len(string))<br></code></pre></td></tr></table></figure><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li>str – 指定检索的字符串</li><li>beg – 开始索引，默认为0。</li><li>end – 结束索引，默认为字符串的长度。</li></ul><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>如果包含子字符串返回开始的索引值，否则返回-1。</p><h4 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h4><p>Python <strong>split()</strong> 通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则分隔 num+1 个子字符串</p><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>split() 方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.split(<span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;&quot;</span>, num=string.count(<span class="hljs-built_in">str</span>)).<br></code></pre></td></tr></table></figure><h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><ul><li>str – 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</li><li>num – 分割次数。默认为 -1, 即分隔所有。</li></ul><h5 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h5><p>返回分割后的字符串列表。</p><h4 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h4><p>append() 方法用于在列表末尾添加新的对象。</p><h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><p>append()方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.append(obj)<br></code></pre></td></tr></table></figure><h5 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h5><ul><li>obj – 添加到列表末尾的对象。</li></ul><h5 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h5><p>没有返回值</p><h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><p>insert() 函数用于将指定对象插入列表的指定位置。</p><h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><p>insert()方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.insert(index, obj)<br></code></pre></td></tr></table></figure><h5 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h5><ul><li>index – 对象 obj 需要插入的索引位置。</li><li>obj – 要插入列表中的对象。</li></ul><h5 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h5><p>该方法没有返回值，但会在列表指定位置插入对象。</p><h4 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h4><p>Python count() 方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。</p><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><p>count()方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.count(sub, start= <span class="hljs-number">0</span>,end=<span class="hljs-built_in">len</span>(string))<br></code></pre></td></tr></table></figure><h5 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h5><ul><li>sub – 搜索的子字符串</li><li>start – 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。</li><li>end – 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。</li></ul><h5 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h5><p>该方法返回子字符串在字符串中出现的次数。</p><h4 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h4><p>Python index() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python find()方法一样，只不过如果str不在 string中会报一个异常。</p><h5 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h5><p>index()方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.index(<span class="hljs-built_in">str</span>, beg=<span class="hljs-number">0</span>, end=<span class="hljs-built_in">len</span>(string))<br></code></pre></td></tr></table></figure><h5 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h5><ul><li>str – 指定检索的字符串</li><li>beg – 开始索引，默认为0。</li><li>end – 结束索引，默认为字符串的长度。</li></ul><h5 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h5><p>如果包含子字符串返回开始的索引值，否则抛出异常。</p><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</p><h5 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h5><p>pop()方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.pop([index=-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h5 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h5><ul><li>obj – 可选参数，要移除列表元素的索引值，不能超过列表总长度，默认为 index=-1，删除最后一个列表值。</li></ul><h5 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h5><p>该方法返回从列表中移除的元素对象。</p><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p>remove() 函数用于移除列表中某个值的第一个匹配项。</p><h5 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h5><p>remove()方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.remove(obj)<br></code></pre></td></tr></table></figure><h5 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h5><ul><li>obj – 列表中要移除的对象。</li></ul><h5 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h5><p>该方法没有返回值但是会移除列表中的某个值的第一个匹配项。</p><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。</p><h5 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h5><p>sort()方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>.sort( key=<span class="hljs-literal">None</span>, reverse=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h5 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h5><ul><li>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>reverse – 排序规则，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）。</li></ul><h5 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h5><p>该方法没有返回值，但是会对列表的对象进行排序。</p><h2 id="pandas模块"><a href="#pandas模块" class="headerlink" title="pandas模块"></a>pandas模块</h2><p>以方便，先行导入pandas</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>一维数据结构</p><p>导入列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">variable = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>variable = pd.Series([<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>],index = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure><p>导入字典，字典的key变成index</p><p>查询索引，variable.index</p><p>查询值，variable.values</p><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>二维数据结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df = pd.DataFrame([[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>],[<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>],[<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&quot;C&quot;</span>],[<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>]],columns = [<span class="hljs-string">&quot;小写&quot;</span>,<span class="hljs-string">&quot;大写&quot;</span>],index =[<span class="hljs-string">&quot;一&quot;</span>,<span class="hljs-string">&quot;二&quot;</span>,<span class="hljs-string">&quot;三&quot;</span>,<span class="hljs-string">&quot;四&quot;</span>])<br></code></pre></td></tr></table></figure><h3 id="xlrd"><a href="#xlrd" class="headerlink" title="xlrd"></a>xlrd</h3><p>读取excel文件</p><p>df = pd.read_excel(r”s:/我的资料库/临时交换/hello/水.xlsx”)</p><p>读csv文件</p><p>df=pd.read_csv(r” “ )</p><p>读txt和csv</p><p>df=pd.read_table(r””,sep = “ “)</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>T1降级及线刷</title>
    <link href="/2020/12/11/t1/"/>
    <url>/2020/12/11/t1/</url>
    
    <content type="html"><![CDATA[<h2 id="1-下载固件、软件及备好工具"><a href="#1-下载固件、软件及备好工具" class="headerlink" title="1 下载固件、软件及备好工具"></a>1 下载固件、软件及备好工具</h2><ul><li>下载 斐讯T1、N1官方系统降级工具<br>链接：<a href="https://pan.baidu.com/s/1KBxq4MveOAQ-n4pBOcfrHQ">https://pan.baidu.com/s/1KBxq4MveOAQ-n4pBOcfrHQ</a> 密码：0uxv</li><li>下载 USB Burning Tool<br><a href="https://www.znds.com/tv-1029745-1-1.html">https://www.znds.com/tv-1029745-1-1.html</a> 推荐：我下载的是 2.0.5版本 解压就可以用。</li><li>去各大安卓市场 下载斐讯遥控器APP</li><li>一根双公头USB线。</li></ul><h2 id="2-打开盒子远程调试及查看版本号、IP地址"><a href="#2-打开盒子远程调试及查看版本号、IP地址" class="headerlink" title="2 打开盒子远程调试及查看版本号、IP地址"></a>2 打开盒子远程调试及查看版本号、IP地址</h2><ul><li><p>机顶盒开机后连上WIFI,   由于斐讯已经关闭注册服务器，需要下载斐讯遥控器APP然后在机顶盒同一个WIFI下配对机顶盒，点击中间的“齿轮”按钮，出现设置页面，然后点击高级设置-&gt;打开远程调试。</p><p> <img src="/2020/12/11/t1/image_7.jpg" alt="img"></p></li><li><p>查看版本号,如果版本号低于1.3T33不用降级，如果版本号高于1.3T33则需要降级。</p></li><li><p>查看盒子的IP地址，在WIFI那里看.</p></li></ul><h2 id="3-降级流程"><a href="#3-降级流程" class="headerlink" title="3  降级流程"></a>3  降级流程</h2><p>打开斐讯T1、N1官方系统降级工具<br>运行onekey-&gt;run.bat 输入1，选择T1降级，输入盒子的IP地址，等待盒子降级完毕。也可以看这个教程 <a href="https://www.right.com.cn/forum/thread-340279-1-1.html">https://www.right.com.cn/forum/thread-340279-1-1.html</a> </p><p>   <img src="/2020/12/11/t1/image_1.jpg" alt="img"></p><h2 id="4-引导机顶盒进入线刷模式，"><a href="#4-引导机顶盒进入线刷模式，" class="headerlink" title="4 引导机顶盒进入线刷模式，"></a>4 引导机顶盒进入线刷模式，</h2><ul><li>等待降级完毕后，再打开run.bat，输入3，选择盒子进入线刷模式，输入盒子的IP地址，等待提示连接USB双公头线，然后连接USB线，这里先不要点击任意键继续。<br><img src="/2020/12/11/t1/image_2.jpg" alt="img"></li><li>打开USB Burning Tool-&gt;WorldCup_Device-&gt;InstallDriver.exe 安装驱动<br><img src="/2020/12/11/t1/image_3.jpg" alt="img"></li><li>运行USB Burning Tool-&gt;USB_Burning_Tool.exe</li><li>导入烧录包-&gt;取消擦除flash和擦除bootloader两个勾选-&gt;点击开始<br><img src="/2020/12/11/t1/image_4.jpg" alt="img"></li><li>回到run.bat  按任意键继续运行这个批处理命令</li><li>机顶盒会自动重启进入线刷模式，等待读条100%变绿，点击停止，拔掉USB线，插拔电源线重启。<br>  <img src="/2020/12/11/t1/image_5.jpg" alt="img"><br>  <img src="/2020/12/11/t1/image_6.jpg" alt="img"></li></ul>]]></content>
    
    
    <categories>
      
      <category>机顶盒</category>
      
    </categories>
    
    
    <tags>
      
      <tag>斐讯</tag>
      
      <tag>软路由</tag>
      
      <tag>T1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客建立</title>
    <link href="/2020/12/10/Test-blog/"/>
    <url>/2020/12/10/Test-blog/</url>
    
    <content type="html"><![CDATA[<p>在用的两个笔记软件对记录代码和备查方面都不是完美的，在了解了Hexo之后决定建一个博客站试试。<br><br>因为折腾了nas，openwrt,vps这些东西,有很多的教程和代码要记录下来备查，对笔记软件多了一条代码的需求。<br><br>Onenote是个好的笔记软件，全平台都很方便，是我的主要的笔记空间，但在代码方面简直弱爆了，复制出来的代码经常运行出错。<br><br>后来拿到了公司电信送的服务器，带500M的空间，于是建了一个seafile服务器，seafile可以把资料库公开发布，使用md编辑文章，实时发布，接触了markdown，觉得是一个很方便的代码笔记手段。问题是，不去电信备案的话不能使用80好443，甚至不能接入域名，记不住ip的话，还得代理跳一下，seafile公开的web地址也不简洁，不太方便。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><ul><li>web station</li><li>php7.3</li><li>nginx</li><li>git server</li><li>node.js<br><br>这些都可以在套件中心找到。</li></ul><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><ul><li>ssh到nas，root账户登录</li><li>输入代码<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure></li><li>cd 到一个想要建站的目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog  <span class="hljs-comment">#blog会成为博客站的根目录</span><br><span class="hljs-built_in">cd</span> blog<br>npm install<br>hexo s         <span class="hljs-comment">#启动服务，此时可以通过4000端口打开后台，可以通过-p 参数指定端口</span><br>hexo g       <span class="hljs-comment">#生成静态网页，每次更改网页都需要运行此行</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="web-station"><a href="#web-station" class="headerlink" title="web station"></a>web station</h4><ul><li>新建一个虚拟主机</li><li>虽然被封了，但是端口号最好加上80和443，再加其他的端口号</li><li>路径选择刚才hexo创建的博客目录下的public</li><li>勾选HSTS和http/2<br><img src="/2020/12/10/Test-blog/Virtual_host.png" alt="img"></li></ul><h4 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h4><p>群晖可以方便的配置ssl</p><ul><li>去<a href="https://freessl.cn/">freessl</a>申请证书。</li><li>打开控制面板-安全-证书</li><li>导入申请好的证书</li><li>配置证书中选中刚才建好的主机</li></ul><br>此时博客站搭建完成，为更好的工作还需要配置一些插件和主题。<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="安装hexo-admin在线编辑"><a href="#安装hexo-admin在线编辑" class="headerlink" title="安装hexo-admin在线编辑"></a>安装hexo-admin在线编辑</h4><p>博客目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-admin --save #安装hexo-admin插件<br>hexo s<br></code></pre></td></tr></table></figure><p>现在可以通过“<a href="http://localhost:4000/admin%E2%80%9D%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%B0%E4%BA%86%E3%80%82">http://localhost:4000/admin”访问后台了。</a><br>转到导航的”settings”，可以生成密码代码<br><img src="https://img-blog.csdnimg.cn/20191204090912232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25pbmV5YV9jb20=,size_16,color_FFFFFF,t_70" alt="图片"></p><p>将下方的代码复制到博客的_config.yml中<br>在刚才的代码后面加一句：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deployCommand:</span> <span class="hljs-string">&#x27;./admin_script.sh&#x27;</span>   <span class="hljs-comment">#设置部署脚本</span><br></code></pre></td></tr></table></figure><p>在对应目录新建一个admin_script.sh，并赋运行权限，内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo g<br></code></pre></td></tr></table></figure><br><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>主题通常有两种安装方式</p><ul><li><p>直接下载主题到themes目录解压，然后在_config.yml中把theme改成主题目录名。</p></li><li><p>使用npm安装（以现在使用的主题fluid为例）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在_config.yml中把theme改成主题目录名。</p><p>为防止主题更新覆盖自定义设置，可以将主题文件夹中的_config.yml的内容复制到博客根目录的 _config.fluid.yml，此文件优先级比主题目录中的更高。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp node_modules/hexo-theme-fluid/_config.yml _config.fluid.yml<br></code></pre></td></tr></table></figure><p>  <br></p></li></ul><h4 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h4><p>有些操作记录并不想对外公开，于是安装了<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md">加密插件</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-blog-encrypt<br></code></pre></td></tr></table></figure><p>只要在文件头里加入password: 字段即可对文章加密。</p><p>也可以对一个标签加密，在_config.yml里加入如下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Security</span><br><span class="hljs-attr">encrypt:</span> <span class="hljs-comment"># hexo-blog-encrypt</span><br>  <span class="hljs-attr">abstract:</span> <span class="hljs-string">有东西被加密了,</span> <span class="hljs-string">请输入密码查看.</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">您好,</span> <span class="hljs-string">这里需要密码.</span><br>  <span class="hljs-attr">tags:</span><br>  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">tag1</span>, <span class="hljs-attr">password:</span> <span class="hljs-string">密码A</span>&#125;<br>  <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">tag2</span>, <span class="hljs-attr">password:</span> <span class="hljs-string">密码B</span>&#125;<br>  <span class="hljs-attr">template:</span> <span class="hljs-string">&lt;div</span> <span class="hljs-string">id=&quot;hexo-blog-encrypt&quot;</span> <span class="hljs-string">data-wpm=&quot;&#123;&#123;hbeWrongPassMessage&#125;&#125;&quot;</span> <span class="hljs-string">data-whm=&quot;&#123;&#123;hbeWrongHashMessage&#125;&#125;&quot;&gt;&lt;div</span> <span class="hljs-string">class=&quot;hbe-input-container&quot;&gt;&lt;input</span> <span class="hljs-string">type=&quot;password&quot;</span> <span class="hljs-string">id=&quot;hbePass&quot;</span> <span class="hljs-string">placeholder=&quot;&#123;&#123;hbeMessage&#125;&#125;&quot;</span> <span class="hljs-string">/&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div</span> <span class="hljs-string">class=&quot;bottom-line&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script</span> <span class="hljs-string">id=&quot;hbeData&quot;</span> <span class="hljs-string">type=&quot;hbeData&quot;</span> <span class="hljs-string">data-hmacdigest=&quot;&#123;&#123;hbeHmacDigest&#125;&#125;&quot;&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt;</span><br>  <span class="hljs-attr">wrong_pass_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">这个密码看着不太对,</span> <span class="hljs-string">请再试试.</span><br>  <span class="hljs-attr">wrong_hash_message:</span> <span class="hljs-string">抱歉,</span> <span class="hljs-string">这个文章不能被校验,</span> <span class="hljs-string">不过您还是能看看解密后的内容.</span><br></code></pre></td></tr></table></figure><p>只要文章标记为tag1，tag2即可加密。</p><h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><p>hexo默认是按时间排序的，如果要置顶一些文章需要配置一下</p><p>目前已经有修改后支持置顶的<a href="https://github.com/netcan/hexo-generator-index-pin-top">仓库</a>，可以直接用以下命令安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm uninstall hexo-generator-index --save</span><br><span class="hljs-meta">$</span><span class="bash"> npm install hexo-generator-index-pin-top --save12</span><br></code></pre></td></tr></table></figure><p>然后在需要置顶的文章的<code>Front-matter</code>中加上<code>top: true</code>即可。比如下面这篇文章：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">hexo+GitHub博客搭建实战</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2017-09-08 12:00:25</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">博客搭建系列</span><br><span class="hljs-attr">top:</span> <span class="hljs-literal">true</span><br><span class="hljs-string">---123456</span><br></code></pre></td></tr></table></figure><p>到目前为止，置顶功能已经可以实现了。所有相关博文到这边就结束了。</p><p>不过置顶的文章显示在最上面之后，如果没有明确的置顶标志，是不是感觉有点怪怪的呢？</p><h5 id="设置置顶标志"><a href="#设置置顶标志" class="headerlink" title="设置置顶标志"></a>设置置顶标志</h5><p>打开：<code>/blog/themes/next/layout/_macro</code> 目录下的<code>post.swig</code>文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，插入如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% if post.top %&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-thumb-tack&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">7D26CD</span>&gt;</span>置顶<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><h5 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h5><p><u>实际使用中，置顶标志的样式有点问题，应该显示 <strong>置顶</strong>，实际显示：%if post.top %<strong>置顶</strong> %endif% ，我并不太懂代码的写法，只能暂时删去。</u></p><p>翻看了一下fluid主题文档，主题本身有置顶图标。删除hexo-generator-index-pin-top，重新安装 hexo-generator-index</p><p><em>在文章开头 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter (opens new window)</a>中配置 <code>sticky</code> 属性：</em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-attr">sticky:</span> <span class="hljs-number">100</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><p><em><code>sticky</code> 数值越大，该文章越靠前，达到类似于置顶的效果，其他未设置的文章依然按默认排序。</em></p><p><em>当文章设置了 <code>sticky</code> 后，主题会默认在首页文章标题前增加一个图标，来标识这是一个置顶文章，你可以通过<strong>主题配置</strong>去关闭或修改这个功能：</em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">post_sticky:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-top&#x27;</span><br></code></pre></td></tr></table></figure><p><em><code>icon</code> 可以通过<a href="https://fluid-dev.github.io/hexo-fluid-docs/icon/">自定义图标</a>修改为其他图标。</em></p><h3 id="排坑"><a href="#排坑" class="headerlink" title="排坑"></a>排坑</h3><ol><li><h4 id="hexo-clean报错"><a href="#hexo-clean报错" class="headerlink" title="hexo clean报错"></a>hexo clean报错</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">ERROR</span> &#123;<br>  <span class="hljs-attr">err:</span> [<span class="hljs-attr">Error: EISDIR:</span> <span class="hljs-string">illegal</span> <span class="hljs-string">operation</span> <span class="hljs-string">on</span> <span class="hljs-string">a</span> <span class="hljs-string">directory</span>, <span class="hljs-string">read</span>] &#123;<br>    <span class="hljs-attr">errno:</span> <span class="hljs-number">-21</span>,<br>    <span class="hljs-attr">code:</span> <span class="hljs-string">&#x27;EISDIR&#x27;</span>,<br>    <span class="hljs-attr">syscall:</span> <span class="hljs-string">&#x27;read&#x27;</span><br>  &#125;<br>&#125; <span class="hljs-attr">Plugin load failed:</span> <span class="hljs-string">%s</span> <span class="hljs-string">hexo-theme-landscape</span><br></code></pre></td></tr></table></figure><p>​    错误出现在重建hexo目录后，修改默认主题<br>​    估计是依赖冲突，多番查找之后找到了方案，把出问题的插件删除就可以了，反正默认主题我也不用，也就没有再装了。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-builtin-name">remove</span> hexo-theme-landscape<br></code></pre></td></tr></table></figure></li><li><h4 id="网站名乱码"><a href="#网站名乱码" class="headerlink" title="网站名乱码"></a>网站名乱码</h4><p>这是由于_config.yml编码不对，用notepad++ 修改成UTF-8编码，重新生成即可</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
      <category>群晖</category>
      
    </categories>
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>hexo</tag>
      
      <tag>建站</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
